
water_sensor_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003494  08003494  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003494  08003494  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800349c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000074  08003510  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08003510  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ec  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc4  00000000  00000000  0002c189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001872e  00000000  00000000  0002f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdce  00000000  00000000  00047d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bac1  00000000  00000000  00053ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a34  00000000  00000000  000df5e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080033a0 	.word	0x080033a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080033a0 	.word	0x080033a0

0800014c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 10);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	230a      	movs	r3, #10
 800015e:	68b9      	ldr	r1, [r7, #8]
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <_write+0x24>)
 8000162:	f002 f820 	bl	80021a6 <HAL_UART_Transmit>

  return len;
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3710      	adds	r7, #16
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200002b0 	.word	0x200002b0

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000178:	f000 fb38 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017c:	f000 f83c 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000180:	f000 f8f8 	bl	8000374 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000184:	f000 f87a 	bl	800027c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000188:	f000 f8ca 	bl	8000320 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800018c:	2100      	movs	r1, #0
 800018e:	4815      	ldr	r0, [pc, #84]	; (80001e4 <main+0x70>)
 8000190:	f001 faae 	bl	80016f0 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(freq && n_samples > 4) {
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <main+0x74>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d01e      	beq.n	80001da <main+0x66>
 800019c:	4b13      	ldr	r3, [pc, #76]	; (80001ec <main+0x78>)
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	2b04      	cmp	r3, #4
 80001a2:	d91a      	bls.n	80001da <main+0x66>
		  printf("Freq: %d  Amostras: %d\r\n", (int)(freq/n_samples), (int)n_samples);
 80001a4:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x74>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a10      	ldr	r2, [pc, #64]	; (80001ec <main+0x78>)
 80001aa:	8812      	ldrh	r2, [r2, #0]
 80001ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80001b0:	4619      	mov	r1, r3
 80001b2:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <main+0x78>)
 80001b4:	881b      	ldrh	r3, [r3, #0]
 80001b6:	461a      	mov	r2, r3
 80001b8:	480d      	ldr	r0, [pc, #52]	; (80001f0 <main+0x7c>)
 80001ba:	f002 f991 	bl	80024e0 <iprintf>
		  memset(samples_freq, 0, n_samples*2);
 80001be:	4b0b      	ldr	r3, [pc, #44]	; (80001ec <main+0x78>)
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	005b      	lsls	r3, r3, #1
 80001c4:	461a      	mov	r2, r3
 80001c6:	2100      	movs	r1, #0
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <main+0x80>)
 80001ca:	f002 f981 	bl	80024d0 <memset>
		  n_samples = 0;
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <main+0x78>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	801a      	strh	r2, [r3, #0]
		  freq = 0;
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <main+0x74>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(500);
 80001da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001de:	f000 fb67 	bl	80008b0 <HAL_Delay>
	  if(freq && n_samples > 4) {
 80001e2:	e7d7      	b.n	8000194 <main+0x20>
 80001e4:	200002f4 	.word	0x200002f4
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	200000a0 	.word	0x200000a0
 80001f0:	080033b8 	.word	0x080033b8
 80001f4:	200000b0 	.word	0x200000b0

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f962 	bl	80024d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800022a:	2300      	movs	r3, #0
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800022e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fdef 	bl	8000e1c <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000244:	f000 f928 	bl	8000498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2101      	movs	r1, #1
 8000262:	4618      	mov	r0, r3
 8000264:	f001 f85a 	bl	800131c <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800026e:	f000 f913 	bl	8000498 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000282:	f107 0310 	add.w	r3, r7, #16
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000298:	4b20      	ldr	r3, [pc, #128]	; (800031c <MX_TIM2_Init+0xa0>)
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80002a0:	4b1e      	ldr	r3, [pc, #120]	; (800031c <MX_TIM2_Init+0xa0>)
 80002a2:	222f      	movs	r2, #47	; 0x2f
 80002a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <MX_TIM2_Init+0xa0>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80002ac:	4b1b      	ldr	r3, [pc, #108]	; (800031c <MX_TIM2_Init+0xa0>)
 80002ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <MX_TIM2_Init+0xa0>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ba:	4b18      	ldr	r3, [pc, #96]	; (800031c <MX_TIM2_Init+0xa0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80002c0:	4816      	ldr	r0, [pc, #88]	; (800031c <MX_TIM2_Init+0xa0>)
 80002c2:	f001 f9c5 	bl	8001650 <HAL_TIM_IC_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002cc:	f000 f8e4 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	480f      	ldr	r0, [pc, #60]	; (800031c <MX_TIM2_Init+0xa0>)
 80002e0:	f001 fea4 	bl	800202c <HAL_TIMEx_MasterConfigSynchronization>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002ea:	f000 f8d5 	bl	8000498 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80002ee:	2300      	movs	r3, #0
 80002f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80002f2:	2301      	movs	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80002fe:	463b      	mov	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	4619      	mov	r1, r3
 8000304:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_TIM2_Init+0xa0>)
 8000306:	f001 fc01 	bl	8001b0c <HAL_TIM_IC_ConfigChannel>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000310:	f000 f8c2 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200002f4 	.word	0x200002f4

08000320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_USART1_UART_Init+0x4c>)
 8000326:	4a12      	ldr	r2, [pc, #72]	; (8000370 <MX_USART1_UART_Init+0x50>)
 8000328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <MX_USART1_UART_Init+0x4c>)
 800032c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_USART1_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <MX_USART1_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <MX_USART1_UART_Init+0x4c>)
 8000346:	220c      	movs	r2, #12
 8000348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_USART1_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <MX_USART1_UART_Init+0x4c>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_USART1_UART_Init+0x4c>)
 8000358:	f001 fed8 	bl	800210c <HAL_UART_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000362:	f000 f899 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200002b0 	.word	0x200002b0
 8000370:	40013800 	.word	0x40013800

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_GPIO_Init+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0320 	and.w	r3, r3, #32
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_GPIO_Init+0x40>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	7f1b      	ldrb	r3, [r3, #28]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d153      	bne.n	8000470 <HAL_TIM_IC_CaptureCallback+0xb8>

		if(is_sample1) {
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00a      	beq.n	80003e6 <HAL_TIM_IC_CaptureCallback+0x2e>
			sample1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80003d0:	2100      	movs	r1, #0
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 fc2e 	bl	8001c34 <HAL_TIM_ReadCapturedValue>
 80003d8:	4603      	mov	r3, r0
 80003da:	4a28      	ldr	r2, [pc, #160]	; (800047c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80003dc:	6013      	str	r3, [r2, #0]
			is_sample1 = 0;
 80003de:	4b26      	ldr	r3, [pc, #152]	; (8000478 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]

			freq += samples_freq[n_samples++];
			is_sample1 = 1;
		}
	}
}
 80003e4:	e044      	b.n	8000470 <HAL_TIM_IC_CaptureCallback+0xb8>
			sample2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80003e6:	2100      	movs	r1, #0
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f001 fc23 	bl	8001c34 <HAL_TIM_ReadCapturedValue>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a23      	ldr	r2, [pc, #140]	; (8000480 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80003f2:	6013      	str	r3, [r2, #0]
			diff = (sample2 > sample1) ? (sample2-sample1):((0xFFFF-sample1)+sample2+1);
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d905      	bls.n	800040c <HAL_TIM_IC_CaptureCallback+0x54>
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	e006      	b.n	800041a <HAL_TIM_IC_CaptureCallback+0x62>
 800040c:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800041a:	4a1a      	ldr	r2, [pc, #104]	; (8000484 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800041c:	6013      	str	r3, [r2, #0]
			samples_freq[n_samples] = (HAL_RCC_GetPCLK1Freq()/12)/diff;
 800041e:	f001 f8d1 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8000422:	4603      	mov	r3, r0
 8000424:	4a18      	ldr	r2, [pc, #96]	; (8000488 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000426:	fba2 2303 	umull	r2, r3, r2, r3
 800042a:	08da      	lsrs	r2, r3, #3
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	fbb2 f1f3 	udiv	r1, r2, r3
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	461a      	mov	r2, r3
 800043a:	b289      	uxth	r1, r1
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800043e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			__HAL_TIM_SetCounter(htim, 0);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
			freq += samples_freq[n_samples++];
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <HAL_TIM_IC_CaptureCallback+0xd4>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	b291      	uxth	r1, r2
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000454:	8011      	strh	r1, [r2, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800045a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800045e:	461a      	mov	r2, r3
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4413      	add	r3, r2
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000468:	6013      	str	r3, [r2, #0]
			is_sample1 = 1;
 800046a:	4b03      	ldr	r3, [pc, #12]	; (8000478 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000000 	.word	0x20000000
 800047c:	20000090 	.word	0x20000090
 8000480:	20000094 	.word	0x20000094
 8000484:	20000098 	.word	0x20000098
 8000488:	aaaaaaab 	.word	0xaaaaaaab
 800048c:	200000a0 	.word	0x200000a0
 8000490:	200000b0 	.word	0x200000b0
 8000494:	2000009c 	.word	0x2000009c

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <Error_Handler+0x8>
	...

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a14      	ldr	r2, [pc, #80]	; (8000500 <HAL_MspInit+0x5c>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_MspInit+0x5c>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_MspInit+0x60>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_MspInit+0x60>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000
 8000504:	40010000 	.word	0x40010000

08000508 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000526:	d12b      	bne.n	8000580 <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <HAL_TIM_IC_MspInit+0x80>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	4a16      	ldr	r2, [pc, #88]	; (8000588 <HAL_TIM_IC_MspInit+0x80>)
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	61d3      	str	r3, [r2, #28]
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_TIM_IC_MspInit+0x80>)
 8000536:	69db      	ldr	r3, [r3, #28]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_TIM_IC_MspInit+0x80>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a10      	ldr	r2, [pc, #64]	; (8000588 <HAL_TIM_IC_MspInit+0x80>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_TIM_IC_MspInit+0x80>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4808      	ldr	r0, [pc, #32]	; (800058c <HAL_TIM_IC_MspInit+0x84>)
 800056c:	f000 fad2 	bl	8000b14 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	201c      	movs	r0, #28
 8000576:	f000 fa96 	bl	8000aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800057a:	201c      	movs	r0, #28
 800057c:	f000 faaf 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	40010800 	.word	0x40010800

08000590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <HAL_UART_MspInit+0x8c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d131      	bne.n	8000614 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_UART_MspInit+0x90>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <HAL_UART_MspInit+0x94>)
 80005f6:	f000 fa8d 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_UART_MspInit+0x94>)
 8000610:	f000 fa80 	bl	8000b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40013800 	.word	0x40013800
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <MemManage_Handler+0x4>

0800063a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <UsageFault_Handler+0x4>

08000646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066e:	f000 f903 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <TIM2_IRQHandler+0x10>)
 800067e:	f001 f93d 	bl	80018fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200002f4 	.word	0x200002f4

0800068c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00a      	b.n	80006b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800069e:	f3af 8000 	nop.w
 80006a2:	4601      	mov	r1, r0
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf0      	blt.n	800069e <_read+0x12>
	}

return len;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
	return -1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ec:	605a      	str	r2, [r3, #4]
	return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <_isatty>:

int _isatty(int file)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	return 1;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800070e:	b480      	push	{r7}
 8000710:	b085      	sub	sp, #20
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
	return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
	...

08000728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <_sbrk+0x5c>)
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <_sbrk+0x60>)
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_sbrk+0x64>)
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <_sbrk+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <_sbrk+0x64>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000758:	f001 fe90 	bl	800247c <__errno>
 800075c:	4603      	mov	r3, r0
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	e009      	b.n	800077c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <_sbrk+0x64>)
 8000778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077a:	68fb      	ldr	r3, [r7, #12]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20005000 	.word	0x20005000
 8000788:	00000400 	.word	0x00000400
 800078c:	200000a4 	.word	0x200000a4
 8000790:	20000350 	.word	0x20000350

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff ffe5 	bl	8000794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 fe5d 	bl	8002488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fcd1 	bl	8000174 <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007dc:	0800349c 	.word	0x0800349c
  ldr r2, =_sbss
 80007e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007e4:	20000350 	.word	0x20000350

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f947 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe4c 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f95f 	bl	8000afa <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 f927 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000004 	.word	0x20000004
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20000008 	.word	0x20000008

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	2000000c 	.word	0x2000000c
 8000898:	2000033c 	.word	0x2000033c

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	2000033c 	.word	0x2000033c

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000000c 	.word	0x2000000c

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	db0b      	blt.n	8000986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	f003 021f 	and.w	r2, r3, #31
 8000974:	4906      	ldr	r1, [pc, #24]	; (8000990 <__NVIC_EnableIRQ+0x34>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	095b      	lsrs	r3, r3, #5
 800097c:	2001      	movs	r0, #1
 800097e:	fa00 f202 	lsl.w	r2, r0, r2
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff90 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff2d 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff42 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff35 	bl	800095c <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa2 	bl	8000a4c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b08b      	sub	sp, #44	; 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e169      	b.n	8000dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8158 	bne.w	8000df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a9a      	ldr	r2, [pc, #616]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d05e      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b50:	4a98      	ldr	r2, [pc, #608]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d875      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b56:	4a98      	ldr	r2, [pc, #608]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d058      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b5c:	4a96      	ldr	r2, [pc, #600]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d86f      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b62:	4a96      	ldr	r2, [pc, #600]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d052      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b68:	4a94      	ldr	r2, [pc, #592]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d869      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a94      	ldr	r2, [pc, #592]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04c      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b74:	4a92      	ldr	r2, [pc, #584]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d863      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b80:	4a90      	ldr	r2, [pc, #576]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d85d      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d82a      	bhi.n	8000be0 <HAL_GPIO_Init+0xcc>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d859      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <HAL_GPIO_Init+0x80>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000be9 	.word	0x08000be9
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c43 	.word	0x08000c43
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c43 	.word	0x08000c43
 8000bb0:	08000c43 	.word	0x08000c43
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c43 	.word	0x08000c43
 8000bbc:	08000c43 	.word	0x08000c43
 8000bc0:	08000c43 	.word	0x08000c43
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	4a79      	ldr	r2, [pc, #484]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e02c      	b.n	8000c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e029      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e024      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e01f      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e01a      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e013      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	611a      	str	r2, [r3, #16]
          break;
 8000c2e:	e009      	b.n	8000c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	615a      	str	r2, [r3, #20]
          break;
 8000c3a:	e003      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          break;
 8000c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	; 0xff
 8000c48:	d801      	bhi.n	8000c4e <HAL_GPIO_Init+0x13a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0x13e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d802      	bhi.n	8000c60 <HAL_GPIO_Init+0x14c>
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x152>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3b08      	subs	r3, #8
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cac:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a40      	ldr	r2, [pc, #256]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d013      	beq.n	8000d00 <HAL_GPIO_Init+0x1ec>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d00d      	beq.n	8000cfc <HAL_GPIO_Init+0x1e8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d007      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3d      	ldr	r2, [pc, #244]	; (8000de0 <HAL_GPIO_Init+0x2cc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d101      	bne.n	8000cf4 <HAL_GPIO_Init+0x1e0>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e004      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	4093      	lsls	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d12:	492f      	ldr	r1, [pc, #188]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	492c      	ldr	r1, [pc, #176]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4928      	ldr	r1, [pc, #160]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	4922      	ldr	r1, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	604b      	str	r3, [r1, #4]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	491e      	ldr	r1, [pc, #120]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	4918      	ldr	r1, [pc, #96]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4914      	ldr	r1, [pc, #80]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d021      	beq.n	8000de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	490e      	ldr	r1, [pc, #56]	; (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
 8000db0:	e021      	b.n	8000df6 <HAL_GPIO_Init+0x2e2>
 8000db2:	bf00      	nop
 8000db4:	10320000 	.word	0x10320000
 8000db8:	10310000 	.word	0x10310000
 8000dbc:	10220000 	.word	0x10220000
 8000dc0:	10210000 	.word	0x10210000
 8000dc4:	10120000 	.word	0x10120000
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4909      	ldr	r1, [pc, #36]	; (8000e18 <HAL_GPIO_Init+0x304>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f47f ae8e 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	372c      	adds	r7, #44	; 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e26c      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8087 	beq.w	8000f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d00c      	beq.n	8000e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e48:	4b8f      	ldr	r3, [pc, #572]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d112      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
 8000e54:	4b8c      	ldr	r3, [pc, #560]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e60:	d10b      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	4b89      	ldr	r3, [pc, #548]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d06c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x12c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d168      	bne.n	8000f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e246      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x76>
 8000e84:	4b80      	ldr	r3, [pc, #512]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a7f      	ldr	r2, [pc, #508]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e02e      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x98>
 8000e9a:	4b7b      	ldr	r3, [pc, #492]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a7a      	ldr	r2, [pc, #488]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b78      	ldr	r3, [pc, #480]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a77      	ldr	r2, [pc, #476]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e01d      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xbc>
 8000ebe:	4b72      	ldr	r3, [pc, #456]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a71      	ldr	r2, [pc, #452]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000ed8:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a6a      	ldr	r2, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b68      	ldr	r3, [pc, #416]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a67      	ldr	r2, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fcd0 	bl	800089c <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fccc 	bl	800089c <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	; 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e1fa      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0xe4>
 8000f1e:	e014      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fcbc 	bl	800089c <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fcb8 	bl	800089c <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e1e6      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x10c>
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d063      	beq.n	800101e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f56:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f62:	4b49      	ldr	r3, [pc, #292]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d11c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x18c>
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d116      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x176>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d001      	beq.n	8000f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e1ba      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4939      	ldr	r1, [pc, #228]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	e03a      	b.n	800101e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d020      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb0:	4b36      	ldr	r3, [pc, #216]	; (800108c <HAL_RCC_OscConfig+0x270>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fc71 	bl	800089c <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fc6d 	bl	800089c <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e19b      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4927      	ldr	r1, [pc, #156]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
 8000ff0:	e015      	b.n	800101e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <HAL_RCC_OscConfig+0x270>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fc50 	bl	800089c <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fc4c 	bl	800089c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e17a      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d03a      	beq.n	80010a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d019      	beq.n	8001066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fc30 	bl	800089c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fc2c 	bl	800089c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e15a      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_RCC_OscConfig+0x26c>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 fad8 	bl	8001614 <RCC_Delay>
 8001064:	e01c      	b.n	80010a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106c:	f7ff fc16 	bl	800089c <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001072:	e00f      	b.n	8001094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fc12 	bl	800089c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d908      	bls.n	8001094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e140      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	42420000 	.word	0x42420000
 8001090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001094:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e9      	bne.n	8001074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80a6 	beq.w	80011fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b2:	4b97      	ldr	r3, [pc, #604]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10d      	bne.n	80010da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b94      	ldr	r3, [pc, #592]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a93      	ldr	r2, [pc, #588]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b91      	ldr	r3, [pc, #580]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010da:	4b8e      	ldr	r3, [pc, #568]	; (8001314 <HAL_RCC_OscConfig+0x4f8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e6:	4b8b      	ldr	r3, [pc, #556]	; (8001314 <HAL_RCC_OscConfig+0x4f8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a8a      	ldr	r2, [pc, #552]	; (8001314 <HAL_RCC_OscConfig+0x4f8>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fbd3 	bl	800089c <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fa:	f7ff fbcf 	bl	800089c <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b64      	cmp	r3, #100	; 0x64
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e0fd      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110c:	4b81      	ldr	r3, [pc, #516]	; (8001314 <HAL_RCC_OscConfig+0x4f8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d106      	bne.n	800112e <HAL_RCC_OscConfig+0x312>
 8001120:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a7a      	ldr	r2, [pc, #488]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6213      	str	r3, [r2, #32]
 800112c:	e02d      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <HAL_RCC_OscConfig+0x334>
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	4a75      	ldr	r2, [pc, #468]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	4b73      	ldr	r3, [pc, #460]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4a72      	ldr	r2, [pc, #456]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	6213      	str	r3, [r2, #32]
 800114e:	e01c      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b05      	cmp	r3, #5
 8001156:	d10c      	bne.n	8001172 <HAL_RCC_OscConfig+0x356>
 8001158:	4b6d      	ldr	r3, [pc, #436]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a6c      	ldr	r2, [pc, #432]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6213      	str	r3, [r2, #32]
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a69      	ldr	r2, [pc, #420]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6213      	str	r3, [r2, #32]
 8001170:	e00b      	b.n	800118a <HAL_RCC_OscConfig+0x36e>
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	4a66      	ldr	r2, [pc, #408]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001178:	f023 0301 	bic.w	r3, r3, #1
 800117c:	6213      	str	r3, [r2, #32]
 800117e:	4b64      	ldr	r3, [pc, #400]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a63      	ldr	r2, [pc, #396]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	f023 0304 	bic.w	r3, r3, #4
 8001188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d015      	beq.n	80011be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fb83 	bl	800089c <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	e00a      	b.n	80011b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119a:	f7ff fb7f 	bl	800089c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0ab      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	4b57      	ldr	r3, [pc, #348]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0ee      	beq.n	800119a <HAL_RCC_OscConfig+0x37e>
 80011bc:	e014      	b.n	80011e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fb6d 	bl	800089c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c6:	f7ff fb69 	bl	800089c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e095      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1ee      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d105      	bne.n	80011fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a47      	ldr	r2, [pc, #284]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8081 	beq.w	8001306 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001204:	4b42      	ldr	r3, [pc, #264]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b08      	cmp	r3, #8
 800120e:	d061      	beq.n	80012d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d146      	bne.n	80012a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <HAL_RCC_OscConfig+0x4fc>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fb3d 	bl	800089c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fb39 	bl	800089c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e067      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d108      	bne.n	8001260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	492d      	ldr	r1, [pc, #180]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a19      	ldr	r1, [r3, #32]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	430b      	orrs	r3, r1
 8001272:	4927      	ldr	r1, [pc, #156]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_RCC_OscConfig+0x4fc>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff fb0d 	bl	800089c <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fb09 	bl	800089c <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e037      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x46a>
 80012a4:	e02f      	b.n	8001306 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_RCC_OscConfig+0x4fc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff faf6 	bl	800089c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff faf2 	bl	800089c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e020      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x498>
 80012d2:	e018      	b.n	8001306 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e013      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_OscConfig+0x4f4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	40007000 	.word	0x40007000
 8001318:	42420060 	.word	0x42420060

0800131c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0d0      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d910      	bls.n	8001360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4965      	ldr	r1, [pc, #404]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0b8      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001378:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001390:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a52      	ldr	r2, [pc, #328]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800139a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	494d      	ldr	r1, [pc, #308]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d040      	beq.n	800143c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d115      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e07f      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e073      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e06b      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f023 0203 	bic.w	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4936      	ldr	r1, [pc, #216]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800140c:	f7ff fa46 	bl	800089c <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	e00a      	b.n	800142a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001414:	f7ff fa42 	bl	800089c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e053      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 020c 	and.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	429a      	cmp	r2, r3
 800143a:	d1eb      	bne.n	8001414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d210      	bcs.n	800146c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4922      	ldr	r1, [pc, #136]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e032      	b.n	80014d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4916      	ldr	r1, [pc, #88]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	490e      	ldr	r1, [pc, #56]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014aa:	f000 f821 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 80014ae:	4602      	mov	r2, r0
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	490a      	ldr	r1, [pc, #40]	; (80014e4 <HAL_RCC_ClockConfig+0x1c8>)
 80014bc:	5ccb      	ldrb	r3, [r1, r3]
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x1cc>)
 80014c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1d0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f9a4 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	080033e4 	.word	0x080033e4
 80014e8:	20000004 	.word	0x20000004
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b490      	push	{r4, r7}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014f8:	1d3c      	adds	r4, r7, #4
 80014fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001500:	f240 2301 	movw	r3, #513	; 0x201
 8001504:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d002      	beq.n	8001530 <HAL_RCC_GetSysClockFreq+0x40>
 800152a:	2b08      	cmp	r3, #8
 800152c:	d003      	beq.n	8001536 <HAL_RCC_GetSysClockFreq+0x46>
 800152e:	e02d      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001532:	623b      	str	r3, [r7, #32]
      break;
 8001534:	e02d      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	0c9b      	lsrs	r3, r3, #18
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001542:	4413      	add	r3, r2
 8001544:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001548:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	0c5b      	lsrs	r3, r3, #17
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001562:	4413      	add	r3, r2
 8001564:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001568:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800156e:	fb02 f203 	mul.w	r2, r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
 800157a:	e004      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	623b      	str	r3, [r7, #32]
      break;
 800158a:	e002      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800158e:	623b      	str	r3, [r7, #32]
      break;
 8001590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001592:	6a3b      	ldr	r3, [r7, #32]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bc90      	pop	{r4, r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	080033d4 	.word	0x080033d4
 80015a4:	40021000 	.word	0x40021000
 80015a8:	007a1200 	.word	0x007a1200
 80015ac:	003d0900 	.word	0x003d0900

080015b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015c8:	f7ff fff2 	bl	80015b0 <HAL_RCC_GetHCLKFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4903      	ldr	r1, [pc, #12]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000
 80015e8:	080033f4 	.word	0x080033f4

080015ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetPCLK2Freq+0x20>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	0adb      	lsrs	r3, r3, #11
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4903      	ldr	r1, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000
 8001610:	080033f4 	.word	0x080033f4

08001614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <RCC_Delay+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <RCC_Delay+0x38>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0a5b      	lsrs	r3, r3, #9
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001630:	bf00      	nop
  }
  while (Delay --);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f9      	bne.n	8001630 <RCC_Delay+0x1c>
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000004 	.word	0x20000004
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e041      	b.n	80016e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe ff46 	bl	8000508 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f000 fb38 	bl	8001d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d104      	bne.n	800170a <HAL_TIM_IC_Start_IT+0x1a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001706:	b2db      	uxtb	r3, r3
 8001708:	e013      	b.n	8001732 <HAL_TIM_IC_Start_IT+0x42>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b04      	cmp	r3, #4
 800170e:	d104      	bne.n	800171a <HAL_TIM_IC_Start_IT+0x2a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001716:	b2db      	uxtb	r3, r3
 8001718:	e00b      	b.n	8001732 <HAL_TIM_IC_Start_IT+0x42>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d104      	bne.n	800172a <HAL_TIM_IC_Start_IT+0x3a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001726:	b2db      	uxtb	r3, r3
 8001728:	e003      	b.n	8001732 <HAL_TIM_IC_Start_IT+0x42>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001730:	b2db      	uxtb	r3, r3
 8001732:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <HAL_TIM_IC_Start_IT+0x54>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e013      	b.n	800176c <HAL_TIM_IC_Start_IT+0x7c>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d104      	bne.n	8001754 <HAL_TIM_IC_Start_IT+0x64>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e00b      	b.n	800176c <HAL_TIM_IC_Start_IT+0x7c>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d104      	bne.n	8001764 <HAL_TIM_IC_Start_IT+0x74>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e003      	b.n	800176c <HAL_TIM_IC_Start_IT+0x7c>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800176a:	b2db      	uxtb	r3, r3
 800176c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0b3      	b.n	80018e6 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <HAL_TIM_IC_Start_IT+0x9e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800178c:	e013      	b.n	80017b6 <HAL_TIM_IC_Start_IT+0xc6>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d104      	bne.n	800179e <HAL_TIM_IC_Start_IT+0xae>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800179c:	e00b      	b.n	80017b6 <HAL_TIM_IC_Start_IT+0xc6>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d104      	bne.n	80017ae <HAL_TIM_IC_Start_IT+0xbe>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2202      	movs	r2, #2
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ac:	e003      	b.n	80017b6 <HAL_TIM_IC_Start_IT+0xc6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <HAL_TIM_IC_Start_IT+0xd6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c4:	e013      	b.n	80017ee <HAL_TIM_IC_Start_IT+0xfe>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d104      	bne.n	80017d6 <HAL_TIM_IC_Start_IT+0xe6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017d4:	e00b      	b.n	80017ee <HAL_TIM_IC_Start_IT+0xfe>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d104      	bne.n	80017e6 <HAL_TIM_IC_Start_IT+0xf6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017e4:	e003      	b.n	80017ee <HAL_TIM_IC_Start_IT+0xfe>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2202      	movs	r2, #2
 80017ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d841      	bhi.n	8001878 <HAL_TIM_IC_Start_IT+0x188>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_TIM_IC_Start_IT+0x10c>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001879 	.word	0x08001879
 8001804:	08001879 	.word	0x08001879
 8001808:	08001879 	.word	0x08001879
 800180c:	08001843 	.word	0x08001843
 8001810:	08001879 	.word	0x08001879
 8001814:	08001879 	.word	0x08001879
 8001818:	08001879 	.word	0x08001879
 800181c:	08001855 	.word	0x08001855
 8001820:	08001879 	.word	0x08001879
 8001824:	08001879 	.word	0x08001879
 8001828:	08001879 	.word	0x08001879
 800182c:	08001867 	.word	0x08001867
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0202 	orr.w	r2, r2, #2
 800183e:	60da      	str	r2, [r3, #12]
      break;
 8001840:	e01b      	b.n	800187a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0204 	orr.w	r2, r2, #4
 8001850:	60da      	str	r2, [r3, #12]
      break;
 8001852:	e012      	b.n	800187a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0208 	orr.w	r2, r2, #8
 8001862:	60da      	str	r2, [r3, #12]
      break;
 8001864:	e009      	b.n	800187a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0210 	orr.w	r2, r2, #16
 8001874:	60da      	str	r2, [r3, #12]
      break;
 8001876:	e000      	b.n	800187a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001878:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fbad 	bl	8001fe2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <HAL_TIM_IC_Start_IT+0x200>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00e      	beq.n	80018b0 <HAL_TIM_IC_Start_IT+0x1c0>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189a:	d009      	beq.n	80018b0 <HAL_TIM_IC_Start_IT+0x1c0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <HAL_TIM_IC_Start_IT+0x204>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d004      	beq.n	80018b0 <HAL_TIM_IC_Start_IT+0x1c0>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_TIM_IC_Start_IT+0x208>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d010      	beq.n	80018e4 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d2:	e007      	b.n	80018e4 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40000400 	.word	0x40000400
 80018f8:	40000800 	.word	0x40000800

080018fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d122      	bne.n	8001958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b02      	cmp	r3, #2
 800191e:	d11b      	bne.n	8001958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0202 	mvn.w	r2, #2
 8001928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fd3a 	bl	80003b8 <HAL_TIM_IC_CaptureCallback>
 8001944:	e005      	b.n	8001952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f9c1 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f9c7 	bl	8001ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d122      	bne.n	80019ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d11b      	bne.n	80019ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f06f 0204 	mvn.w	r2, #4
 800197c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2202      	movs	r2, #2
 8001982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7fe fd10 	bl	80003b8 <HAL_TIM_IC_CaptureCallback>
 8001998:	e005      	b.n	80019a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f997 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f99d 	bl	8001ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d122      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d11b      	bne.n	8001a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0208 	mvn.w	r2, #8
 80019d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2204      	movs	r2, #4
 80019d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fce6 	bl	80003b8 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f96d 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f973 	bl	8001ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d122      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b10      	cmp	r3, #16
 8001a1a:	d11b      	bne.n	8001a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f06f 0210 	mvn.w	r2, #16
 8001a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fcbc 	bl	80003b8 <HAL_TIM_IC_CaptureCallback>
 8001a40:	e005      	b.n	8001a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f943 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f949 	bl	8001ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10e      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d107      	bne.n	8001a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0201 	mvn.w	r2, #1
 8001a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f91e 	bl	8001cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8a:	2b80      	cmp	r3, #128	; 0x80
 8001a8c:	d10e      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a98:	2b80      	cmp	r3, #128	; 0x80
 8001a9a:	d107      	bne.n	8001aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb27 	bl	80020fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b40      	cmp	r3, #64	; 0x40
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d107      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f90d 	bl	8001cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b20      	cmp	r3, #32
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0220 	mvn.w	r2, #32
 8001afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 faf2 	bl	80020e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e082      	b.n	8001c2c <HAL_TIM_IC_ConfigChannel+0x120>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d11b      	bne.n	8001b6c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f000 f940 	bl	8001dc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 020c 	bic.w	r2, r2, #12
 8001b56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6999      	ldr	r1, [r3, #24]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	e05a      	b.n	8001c22 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d11c      	bne.n	8001bac <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f000 f97b 	bl	8001e7c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001b94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6999      	ldr	r1, [r3, #24]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	021a      	lsls	r2, r3, #8
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	619a      	str	r2, [r3, #24]
 8001baa:	e03a      	b.n	8001c22 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11b      	bne.n	8001bea <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f000 f997 	bl	8001ef4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 020c 	bic.w	r2, r2, #12
 8001bd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69d9      	ldr	r1, [r3, #28]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	61da      	str	r2, [r3, #28]
 8001be8:	e01b      	b.n	8001c22 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f000 f9b6 	bl	8001f6a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69d9      	ldr	r1, [r3, #28]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	021a      	lsls	r2, r3, #8
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d831      	bhi.n	8001cac <HAL_TIM_ReadCapturedValue+0x78>
 8001c48:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001cad 	.word	0x08001cad
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001cad 	.word	0x08001cad
 8001c60:	08001c8f 	.word	0x08001c8f
 8001c64:	08001cad 	.word	0x08001cad
 8001c68:	08001cad 	.word	0x08001cad
 8001c6c:	08001cad 	.word	0x08001cad
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	08001cad 	.word	0x08001cad
 8001c78:	08001cad 	.word	0x08001cad
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001ca3 	.word	0x08001ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	60fb      	str	r3, [r7, #12]

      break;
 8001c8c:	e00f      	b.n	8001cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	60fb      	str	r3, [r7, #12]

      break;
 8001c96:	e00a      	b.n	8001cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	60fb      	str	r3, [r7, #12]

      break;
 8001ca0:	e005      	b.n	8001cae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	60fb      	str	r3, [r7, #12]

      break;
 8001caa:	e000      	b.n	8001cae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8001cac:	bf00      	nop
  }

  return tmpreg;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <TIM_Base_SetConfig+0xb8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00b      	beq.n	8001d34 <TIM_Base_SetConfig+0x30>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d22:	d007      	beq.n	8001d34 <TIM_Base_SetConfig+0x30>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <TIM_Base_SetConfig+0xbc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <TIM_Base_SetConfig+0x30>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <TIM_Base_SetConfig+0xc0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d108      	bne.n	8001d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <TIM_Base_SetConfig+0xb8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00b      	beq.n	8001d66 <TIM_Base_SetConfig+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d007      	beq.n	8001d66 <TIM_Base_SetConfig+0x62>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <TIM_Base_SetConfig+0xbc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <TIM_Base_SetConfig+0x62>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <TIM_Base_SetConfig+0xc0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <TIM_Base_SetConfig+0xb8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	615a      	str	r2, [r3, #20]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800

08001dc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	f023 0201 	bic.w	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <TIM_TI1_SetConfig+0xa8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00b      	beq.n	8001e0e <TIM_TI1_SetConfig+0x46>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d007      	beq.n	8001e0e <TIM_TI1_SetConfig+0x46>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <TIM_TI1_SetConfig+0xac>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d003      	beq.n	8001e0e <TIM_TI1_SetConfig+0x46>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <TIM_TI1_SetConfig+0xb0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <TIM_TI1_SetConfig+0x4a>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <TIM_TI1_SetConfig+0x4c>
 8001e12:	2300      	movs	r3, #0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e003      	b.n	8001e32 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f023 030a 	bic.w	r3, r3, #10
 8001e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f003 030a 	and.w	r3, r3, #10
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	621a      	str	r2, [r3, #32]
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800

08001e7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f023 0210 	bic.w	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001eba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	031b      	lsls	r3, r3, #12
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ece:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	621a      	str	r2, [r3, #32]
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 0303 	bic.w	r3, r3, #3
 8001f20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	621a      	str	r2, [r3, #32]
}
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	031b      	lsls	r3, r3, #12
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	031b      	lsls	r3, r3, #12
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	621a      	str	r2, [r3, #32]
}
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b087      	sub	sp, #28
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a1a      	ldr	r2, [r3, #32]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	621a      	str	r2, [r3, #32]
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
	...

0800202c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e046      	b.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00e      	beq.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d009      	beq.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10c      	bne.n	80020c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800

080020e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e03f      	b.n	800219e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fa2c 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f905 	bl	8002360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b08a      	sub	sp, #40	; 0x28
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d17c      	bne.n	80022c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_UART_Transmit+0x2c>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e075      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit+0x3e>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e06e      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fb4f 	bl	800089c <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002214:	d108      	bne.n	8002228 <HAL_UART_Transmit+0x82>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e003      	b.n	8002230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002238:	e02a      	b.n	8002290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f840 	bl	80022ca <UART_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e036      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	3302      	adds	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e007      	b.n	8002282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1cf      	bne.n	800223a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f810 	bl	80022ca <UART_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e006      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022da:	e02c      	b.n	8002336 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d028      	beq.n	8002336 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <UART_WaitOnFlagUntilTimeout+0x30>
 80022ea:	f7fe fad7 	bl	800089c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d21d      	bcs.n	8002336 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002308:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e00f      	b.n	8002356 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4013      	ands	r3, r2
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	429a      	cmp	r2, r3
 8002352:	d0c3      	beq.n	80022dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800239a:	f023 030c 	bic.w	r3, r3, #12
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <UART_SetConfig+0x114>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d103      	bne.n	80023d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023c8:	f7ff f910 	bl	80015ec <HAL_RCC_GetPCLK2Freq>
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	e002      	b.n	80023d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023d0:	f7ff f8f8 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 80023d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009a      	lsls	r2, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <UART_SetConfig+0x118>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	0119      	lsls	r1, r3, #4
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fbb2 f2f3 	udiv	r2, r2, r3
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <UART_SetConfig+0x118>)
 800240e:	fba3 0302 	umull	r0, r3, r3, r2
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2064      	movs	r0, #100	; 0x64
 8002416:	fb00 f303 	mul.w	r3, r0, r3
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	3332      	adds	r3, #50	; 0x32
 8002420:	4a15      	ldr	r2, [pc, #84]	; (8002478 <UART_SetConfig+0x118>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242c:	4419      	add	r1, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009a      	lsls	r2, r3, #2
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fbb2 f2f3 	udiv	r2, r2, r3
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <UART_SetConfig+0x118>)
 8002446:	fba3 0302 	umull	r0, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	fb00 f303 	mul.w	r3, r0, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	3332      	adds	r3, #50	; 0x32
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <UART_SetConfig+0x118>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	f003 020f 	and.w	r2, r3, #15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	440a      	add	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40013800 	.word	0x40013800
 8002478:	51eb851f 	.word	0x51eb851f

0800247c <__errno>:
 800247c:	4b01      	ldr	r3, [pc, #4]	; (8002484 <__errno+0x8>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000010 	.word	0x20000010

08002488 <__libc_init_array>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	2600      	movs	r6, #0
 800248c:	4d0c      	ldr	r5, [pc, #48]	; (80024c0 <__libc_init_array+0x38>)
 800248e:	4c0d      	ldr	r4, [pc, #52]	; (80024c4 <__libc_init_array+0x3c>)
 8002490:	1b64      	subs	r4, r4, r5
 8002492:	10a4      	asrs	r4, r4, #2
 8002494:	42a6      	cmp	r6, r4
 8002496:	d109      	bne.n	80024ac <__libc_init_array+0x24>
 8002498:	f000 ff82 	bl	80033a0 <_init>
 800249c:	2600      	movs	r6, #0
 800249e:	4d0a      	ldr	r5, [pc, #40]	; (80024c8 <__libc_init_array+0x40>)
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <__libc_init_array+0x44>)
 80024a2:	1b64      	subs	r4, r4, r5
 80024a4:	10a4      	asrs	r4, r4, #2
 80024a6:	42a6      	cmp	r6, r4
 80024a8:	d105      	bne.n	80024b6 <__libc_init_array+0x2e>
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b0:	4798      	blx	r3
 80024b2:	3601      	adds	r6, #1
 80024b4:	e7ee      	b.n	8002494 <__libc_init_array+0xc>
 80024b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ba:	4798      	blx	r3
 80024bc:	3601      	adds	r6, #1
 80024be:	e7f2      	b.n	80024a6 <__libc_init_array+0x1e>
 80024c0:	08003494 	.word	0x08003494
 80024c4:	08003494 	.word	0x08003494
 80024c8:	08003494 	.word	0x08003494
 80024cc:	08003498 	.word	0x08003498

080024d0 <memset>:
 80024d0:	4603      	mov	r3, r0
 80024d2:	4402      	add	r2, r0
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d100      	bne.n	80024da <memset+0xa>
 80024d8:	4770      	bx	lr
 80024da:	f803 1b01 	strb.w	r1, [r3], #1
 80024de:	e7f9      	b.n	80024d4 <memset+0x4>

080024e0 <iprintf>:
 80024e0:	b40f      	push	{r0, r1, r2, r3}
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <iprintf+0x2c>)
 80024e4:	b513      	push	{r0, r1, r4, lr}
 80024e6:	681c      	ldr	r4, [r3, #0]
 80024e8:	b124      	cbz	r4, 80024f4 <iprintf+0x14>
 80024ea:	69a3      	ldr	r3, [r4, #24]
 80024ec:	b913      	cbnz	r3, 80024f4 <iprintf+0x14>
 80024ee:	4620      	mov	r0, r4
 80024f0:	f000 f866 	bl	80025c0 <__sinit>
 80024f4:	ab05      	add	r3, sp, #20
 80024f6:	4620      	mov	r0, r4
 80024f8:	9a04      	ldr	r2, [sp, #16]
 80024fa:	68a1      	ldr	r1, [r4, #8]
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	f000 f981 	bl	8002804 <_vfiprintf_r>
 8002502:	b002      	add	sp, #8
 8002504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002508:	b004      	add	sp, #16
 800250a:	4770      	bx	lr
 800250c:	20000010 	.word	0x20000010

08002510 <std>:
 8002510:	2300      	movs	r3, #0
 8002512:	b510      	push	{r4, lr}
 8002514:	4604      	mov	r4, r0
 8002516:	e9c0 3300 	strd	r3, r3, [r0]
 800251a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800251e:	6083      	str	r3, [r0, #8]
 8002520:	8181      	strh	r1, [r0, #12]
 8002522:	6643      	str	r3, [r0, #100]	; 0x64
 8002524:	81c2      	strh	r2, [r0, #14]
 8002526:	6183      	str	r3, [r0, #24]
 8002528:	4619      	mov	r1, r3
 800252a:	2208      	movs	r2, #8
 800252c:	305c      	adds	r0, #92	; 0x5c
 800252e:	f7ff ffcf 	bl	80024d0 <memset>
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <std+0x38>)
 8002534:	6224      	str	r4, [r4, #32]
 8002536:	6263      	str	r3, [r4, #36]	; 0x24
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <std+0x3c>)
 800253a:	62a3      	str	r3, [r4, #40]	; 0x28
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <std+0x40>)
 800253e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <std+0x44>)
 8002542:	6323      	str	r3, [r4, #48]	; 0x30
 8002544:	bd10      	pop	{r4, pc}
 8002546:	bf00      	nop
 8002548:	08002db1 	.word	0x08002db1
 800254c:	08002dd3 	.word	0x08002dd3
 8002550:	08002e0b 	.word	0x08002e0b
 8002554:	08002e2f 	.word	0x08002e2f

08002558 <_cleanup_r>:
 8002558:	4901      	ldr	r1, [pc, #4]	; (8002560 <_cleanup_r+0x8>)
 800255a:	f000 b8af 	b.w	80026bc <_fwalk_reent>
 800255e:	bf00      	nop
 8002560:	08003109 	.word	0x08003109

08002564 <__sfmoreglue>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	2568      	movs	r5, #104	; 0x68
 8002568:	1e4a      	subs	r2, r1, #1
 800256a:	4355      	muls	r5, r2
 800256c:	460e      	mov	r6, r1
 800256e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002572:	f000 f8c5 	bl	8002700 <_malloc_r>
 8002576:	4604      	mov	r4, r0
 8002578:	b140      	cbz	r0, 800258c <__sfmoreglue+0x28>
 800257a:	2100      	movs	r1, #0
 800257c:	e9c0 1600 	strd	r1, r6, [r0]
 8002580:	300c      	adds	r0, #12
 8002582:	60a0      	str	r0, [r4, #8]
 8002584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002588:	f7ff ffa2 	bl	80024d0 <memset>
 800258c:	4620      	mov	r0, r4
 800258e:	bd70      	pop	{r4, r5, r6, pc}

08002590 <__sfp_lock_acquire>:
 8002590:	4801      	ldr	r0, [pc, #4]	; (8002598 <__sfp_lock_acquire+0x8>)
 8002592:	f000 b8b3 	b.w	80026fc <__retarget_lock_acquire_recursive>
 8002596:	bf00      	nop
 8002598:	20000348 	.word	0x20000348

0800259c <__sfp_lock_release>:
 800259c:	4801      	ldr	r0, [pc, #4]	; (80025a4 <__sfp_lock_release+0x8>)
 800259e:	f000 b8ae 	b.w	80026fe <__retarget_lock_release_recursive>
 80025a2:	bf00      	nop
 80025a4:	20000348 	.word	0x20000348

080025a8 <__sinit_lock_acquire>:
 80025a8:	4801      	ldr	r0, [pc, #4]	; (80025b0 <__sinit_lock_acquire+0x8>)
 80025aa:	f000 b8a7 	b.w	80026fc <__retarget_lock_acquire_recursive>
 80025ae:	bf00      	nop
 80025b0:	20000343 	.word	0x20000343

080025b4 <__sinit_lock_release>:
 80025b4:	4801      	ldr	r0, [pc, #4]	; (80025bc <__sinit_lock_release+0x8>)
 80025b6:	f000 b8a2 	b.w	80026fe <__retarget_lock_release_recursive>
 80025ba:	bf00      	nop
 80025bc:	20000343 	.word	0x20000343

080025c0 <__sinit>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4604      	mov	r4, r0
 80025c4:	f7ff fff0 	bl	80025a8 <__sinit_lock_acquire>
 80025c8:	69a3      	ldr	r3, [r4, #24]
 80025ca:	b11b      	cbz	r3, 80025d4 <__sinit+0x14>
 80025cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025d0:	f7ff bff0 	b.w	80025b4 <__sinit_lock_release>
 80025d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025d8:	6523      	str	r3, [r4, #80]	; 0x50
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <__sinit+0x68>)
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <__sinit+0x6c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80025e2:	42a3      	cmp	r3, r4
 80025e4:	bf08      	it	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	4620      	mov	r0, r4
 80025ea:	bf08      	it	eq
 80025ec:	61a3      	streq	r3, [r4, #24]
 80025ee:	f000 f81f 	bl	8002630 <__sfp>
 80025f2:	6060      	str	r0, [r4, #4]
 80025f4:	4620      	mov	r0, r4
 80025f6:	f000 f81b 	bl	8002630 <__sfp>
 80025fa:	60a0      	str	r0, [r4, #8]
 80025fc:	4620      	mov	r0, r4
 80025fe:	f000 f817 	bl	8002630 <__sfp>
 8002602:	2200      	movs	r2, #0
 8002604:	2104      	movs	r1, #4
 8002606:	60e0      	str	r0, [r4, #12]
 8002608:	6860      	ldr	r0, [r4, #4]
 800260a:	f7ff ff81 	bl	8002510 <std>
 800260e:	2201      	movs	r2, #1
 8002610:	2109      	movs	r1, #9
 8002612:	68a0      	ldr	r0, [r4, #8]
 8002614:	f7ff ff7c 	bl	8002510 <std>
 8002618:	2202      	movs	r2, #2
 800261a:	2112      	movs	r1, #18
 800261c:	68e0      	ldr	r0, [r4, #12]
 800261e:	f7ff ff77 	bl	8002510 <std>
 8002622:	2301      	movs	r3, #1
 8002624:	61a3      	str	r3, [r4, #24]
 8002626:	e7d1      	b.n	80025cc <__sinit+0xc>
 8002628:	080033fc 	.word	0x080033fc
 800262c:	08002559 	.word	0x08002559

08002630 <__sfp>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	4607      	mov	r7, r0
 8002634:	f7ff ffac 	bl	8002590 <__sfp_lock_acquire>
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <__sfp+0x84>)
 800263a:	681e      	ldr	r6, [r3, #0]
 800263c:	69b3      	ldr	r3, [r6, #24]
 800263e:	b913      	cbnz	r3, 8002646 <__sfp+0x16>
 8002640:	4630      	mov	r0, r6
 8002642:	f7ff ffbd 	bl	80025c0 <__sinit>
 8002646:	3648      	adds	r6, #72	; 0x48
 8002648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800264c:	3b01      	subs	r3, #1
 800264e:	d503      	bpl.n	8002658 <__sfp+0x28>
 8002650:	6833      	ldr	r3, [r6, #0]
 8002652:	b30b      	cbz	r3, 8002698 <__sfp+0x68>
 8002654:	6836      	ldr	r6, [r6, #0]
 8002656:	e7f7      	b.n	8002648 <__sfp+0x18>
 8002658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800265c:	b9d5      	cbnz	r5, 8002694 <__sfp+0x64>
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <__sfp+0x88>)
 8002660:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002664:	60e3      	str	r3, [r4, #12]
 8002666:	6665      	str	r5, [r4, #100]	; 0x64
 8002668:	f000 f847 	bl	80026fa <__retarget_lock_init_recursive>
 800266c:	f7ff ff96 	bl	800259c <__sfp_lock_release>
 8002670:	2208      	movs	r2, #8
 8002672:	4629      	mov	r1, r5
 8002674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800267c:	6025      	str	r5, [r4, #0]
 800267e:	61a5      	str	r5, [r4, #24]
 8002680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002684:	f7ff ff24 	bl	80024d0 <memset>
 8002688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800268c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002690:	4620      	mov	r0, r4
 8002692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002694:	3468      	adds	r4, #104	; 0x68
 8002696:	e7d9      	b.n	800264c <__sfp+0x1c>
 8002698:	2104      	movs	r1, #4
 800269a:	4638      	mov	r0, r7
 800269c:	f7ff ff62 	bl	8002564 <__sfmoreglue>
 80026a0:	4604      	mov	r4, r0
 80026a2:	6030      	str	r0, [r6, #0]
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d1d5      	bne.n	8002654 <__sfp+0x24>
 80026a8:	f7ff ff78 	bl	800259c <__sfp_lock_release>
 80026ac:	230c      	movs	r3, #12
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	e7ee      	b.n	8002690 <__sfp+0x60>
 80026b2:	bf00      	nop
 80026b4:	080033fc 	.word	0x080033fc
 80026b8:	ffff0001 	.word	0xffff0001

080026bc <_fwalk_reent>:
 80026bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026c0:	4606      	mov	r6, r0
 80026c2:	4688      	mov	r8, r1
 80026c4:	2700      	movs	r7, #0
 80026c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026ce:	f1b9 0901 	subs.w	r9, r9, #1
 80026d2:	d505      	bpl.n	80026e0 <_fwalk_reent+0x24>
 80026d4:	6824      	ldr	r4, [r4, #0]
 80026d6:	2c00      	cmp	r4, #0
 80026d8:	d1f7      	bne.n	80026ca <_fwalk_reent+0xe>
 80026da:	4638      	mov	r0, r7
 80026dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026e0:	89ab      	ldrh	r3, [r5, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d907      	bls.n	80026f6 <_fwalk_reent+0x3a>
 80026e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026ea:	3301      	adds	r3, #1
 80026ec:	d003      	beq.n	80026f6 <_fwalk_reent+0x3a>
 80026ee:	4629      	mov	r1, r5
 80026f0:	4630      	mov	r0, r6
 80026f2:	47c0      	blx	r8
 80026f4:	4307      	orrs	r7, r0
 80026f6:	3568      	adds	r5, #104	; 0x68
 80026f8:	e7e9      	b.n	80026ce <_fwalk_reent+0x12>

080026fa <__retarget_lock_init_recursive>:
 80026fa:	4770      	bx	lr

080026fc <__retarget_lock_acquire_recursive>:
 80026fc:	4770      	bx	lr

080026fe <__retarget_lock_release_recursive>:
 80026fe:	4770      	bx	lr

08002700 <_malloc_r>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	1ccd      	adds	r5, r1, #3
 8002704:	f025 0503 	bic.w	r5, r5, #3
 8002708:	3508      	adds	r5, #8
 800270a:	2d0c      	cmp	r5, #12
 800270c:	bf38      	it	cc
 800270e:	250c      	movcc	r5, #12
 8002710:	2d00      	cmp	r5, #0
 8002712:	4606      	mov	r6, r0
 8002714:	db01      	blt.n	800271a <_malloc_r+0x1a>
 8002716:	42a9      	cmp	r1, r5
 8002718:	d903      	bls.n	8002722 <_malloc_r+0x22>
 800271a:	230c      	movs	r3, #12
 800271c:	6033      	str	r3, [r6, #0]
 800271e:	2000      	movs	r0, #0
 8002720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002722:	f000 fdb1 	bl	8003288 <__malloc_lock>
 8002726:	4921      	ldr	r1, [pc, #132]	; (80027ac <_malloc_r+0xac>)
 8002728:	680a      	ldr	r2, [r1, #0]
 800272a:	4614      	mov	r4, r2
 800272c:	b99c      	cbnz	r4, 8002756 <_malloc_r+0x56>
 800272e:	4f20      	ldr	r7, [pc, #128]	; (80027b0 <_malloc_r+0xb0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b923      	cbnz	r3, 800273e <_malloc_r+0x3e>
 8002734:	4621      	mov	r1, r4
 8002736:	4630      	mov	r0, r6
 8002738:	f000 fb2a 	bl	8002d90 <_sbrk_r>
 800273c:	6038      	str	r0, [r7, #0]
 800273e:	4629      	mov	r1, r5
 8002740:	4630      	mov	r0, r6
 8002742:	f000 fb25 	bl	8002d90 <_sbrk_r>
 8002746:	1c43      	adds	r3, r0, #1
 8002748:	d123      	bne.n	8002792 <_malloc_r+0x92>
 800274a:	230c      	movs	r3, #12
 800274c:	4630      	mov	r0, r6
 800274e:	6033      	str	r3, [r6, #0]
 8002750:	f000 fda0 	bl	8003294 <__malloc_unlock>
 8002754:	e7e3      	b.n	800271e <_malloc_r+0x1e>
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	1b5b      	subs	r3, r3, r5
 800275a:	d417      	bmi.n	800278c <_malloc_r+0x8c>
 800275c:	2b0b      	cmp	r3, #11
 800275e:	d903      	bls.n	8002768 <_malloc_r+0x68>
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	441c      	add	r4, r3
 8002764:	6025      	str	r5, [r4, #0]
 8002766:	e004      	b.n	8002772 <_malloc_r+0x72>
 8002768:	6863      	ldr	r3, [r4, #4]
 800276a:	42a2      	cmp	r2, r4
 800276c:	bf0c      	ite	eq
 800276e:	600b      	streq	r3, [r1, #0]
 8002770:	6053      	strne	r3, [r2, #4]
 8002772:	4630      	mov	r0, r6
 8002774:	f000 fd8e 	bl	8003294 <__malloc_unlock>
 8002778:	f104 000b 	add.w	r0, r4, #11
 800277c:	1d23      	adds	r3, r4, #4
 800277e:	f020 0007 	bic.w	r0, r0, #7
 8002782:	1ac2      	subs	r2, r0, r3
 8002784:	d0cc      	beq.n	8002720 <_malloc_r+0x20>
 8002786:	1a1b      	subs	r3, r3, r0
 8002788:	50a3      	str	r3, [r4, r2]
 800278a:	e7c9      	b.n	8002720 <_malloc_r+0x20>
 800278c:	4622      	mov	r2, r4
 800278e:	6864      	ldr	r4, [r4, #4]
 8002790:	e7cc      	b.n	800272c <_malloc_r+0x2c>
 8002792:	1cc4      	adds	r4, r0, #3
 8002794:	f024 0403 	bic.w	r4, r4, #3
 8002798:	42a0      	cmp	r0, r4
 800279a:	d0e3      	beq.n	8002764 <_malloc_r+0x64>
 800279c:	1a21      	subs	r1, r4, r0
 800279e:	4630      	mov	r0, r6
 80027a0:	f000 faf6 	bl	8002d90 <_sbrk_r>
 80027a4:	3001      	adds	r0, #1
 80027a6:	d1dd      	bne.n	8002764 <_malloc_r+0x64>
 80027a8:	e7cf      	b.n	800274a <_malloc_r+0x4a>
 80027aa:	bf00      	nop
 80027ac:	200000a8 	.word	0x200000a8
 80027b0:	200000ac 	.word	0x200000ac

080027b4 <__sfputc_r>:
 80027b4:	6893      	ldr	r3, [r2, #8]
 80027b6:	b410      	push	{r4}
 80027b8:	3b01      	subs	r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	6093      	str	r3, [r2, #8]
 80027be:	da07      	bge.n	80027d0 <__sfputc_r+0x1c>
 80027c0:	6994      	ldr	r4, [r2, #24]
 80027c2:	42a3      	cmp	r3, r4
 80027c4:	db01      	blt.n	80027ca <__sfputc_r+0x16>
 80027c6:	290a      	cmp	r1, #10
 80027c8:	d102      	bne.n	80027d0 <__sfputc_r+0x1c>
 80027ca:	bc10      	pop	{r4}
 80027cc:	f000 bb34 	b.w	8002e38 <__swbuf_r>
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	1c58      	adds	r0, r3, #1
 80027d4:	6010      	str	r0, [r2, #0]
 80027d6:	7019      	strb	r1, [r3, #0]
 80027d8:	4608      	mov	r0, r1
 80027da:	bc10      	pop	{r4}
 80027dc:	4770      	bx	lr

080027de <__sfputs_r>:
 80027de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e0:	4606      	mov	r6, r0
 80027e2:	460f      	mov	r7, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	18d5      	adds	r5, r2, r3
 80027e8:	42ac      	cmp	r4, r5
 80027ea:	d101      	bne.n	80027f0 <__sfputs_r+0x12>
 80027ec:	2000      	movs	r0, #0
 80027ee:	e007      	b.n	8002800 <__sfputs_r+0x22>
 80027f0:	463a      	mov	r2, r7
 80027f2:	4630      	mov	r0, r6
 80027f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027f8:	f7ff ffdc 	bl	80027b4 <__sfputc_r>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d1f3      	bne.n	80027e8 <__sfputs_r+0xa>
 8002800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002804 <_vfiprintf_r>:
 8002804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002808:	460d      	mov	r5, r1
 800280a:	4614      	mov	r4, r2
 800280c:	4698      	mov	r8, r3
 800280e:	4606      	mov	r6, r0
 8002810:	b09d      	sub	sp, #116	; 0x74
 8002812:	b118      	cbz	r0, 800281c <_vfiprintf_r+0x18>
 8002814:	6983      	ldr	r3, [r0, #24]
 8002816:	b90b      	cbnz	r3, 800281c <_vfiprintf_r+0x18>
 8002818:	f7ff fed2 	bl	80025c0 <__sinit>
 800281c:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <_vfiprintf_r+0x240>)
 800281e:	429d      	cmp	r5, r3
 8002820:	d11b      	bne.n	800285a <_vfiprintf_r+0x56>
 8002822:	6875      	ldr	r5, [r6, #4]
 8002824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002826:	07d9      	lsls	r1, r3, #31
 8002828:	d405      	bmi.n	8002836 <_vfiprintf_r+0x32>
 800282a:	89ab      	ldrh	r3, [r5, #12]
 800282c:	059a      	lsls	r2, r3, #22
 800282e:	d402      	bmi.n	8002836 <_vfiprintf_r+0x32>
 8002830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002832:	f7ff ff63 	bl	80026fc <__retarget_lock_acquire_recursive>
 8002836:	89ab      	ldrh	r3, [r5, #12]
 8002838:	071b      	lsls	r3, r3, #28
 800283a:	d501      	bpl.n	8002840 <_vfiprintf_r+0x3c>
 800283c:	692b      	ldr	r3, [r5, #16]
 800283e:	b9eb      	cbnz	r3, 800287c <_vfiprintf_r+0x78>
 8002840:	4629      	mov	r1, r5
 8002842:	4630      	mov	r0, r6
 8002844:	f000 fb5c 	bl	8002f00 <__swsetup_r>
 8002848:	b1c0      	cbz	r0, 800287c <_vfiprintf_r+0x78>
 800284a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800284c:	07dc      	lsls	r4, r3, #31
 800284e:	d50e      	bpl.n	800286e <_vfiprintf_r+0x6a>
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	b01d      	add	sp, #116	; 0x74
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285a:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <_vfiprintf_r+0x244>)
 800285c:	429d      	cmp	r5, r3
 800285e:	d101      	bne.n	8002864 <_vfiprintf_r+0x60>
 8002860:	68b5      	ldr	r5, [r6, #8]
 8002862:	e7df      	b.n	8002824 <_vfiprintf_r+0x20>
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <_vfiprintf_r+0x248>)
 8002866:	429d      	cmp	r5, r3
 8002868:	bf08      	it	eq
 800286a:	68f5      	ldreq	r5, [r6, #12]
 800286c:	e7da      	b.n	8002824 <_vfiprintf_r+0x20>
 800286e:	89ab      	ldrh	r3, [r5, #12]
 8002870:	0598      	lsls	r0, r3, #22
 8002872:	d4ed      	bmi.n	8002850 <_vfiprintf_r+0x4c>
 8002874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002876:	f7ff ff42 	bl	80026fe <__retarget_lock_release_recursive>
 800287a:	e7e9      	b.n	8002850 <_vfiprintf_r+0x4c>
 800287c:	2300      	movs	r3, #0
 800287e:	9309      	str	r3, [sp, #36]	; 0x24
 8002880:	2320      	movs	r3, #32
 8002882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002886:	2330      	movs	r3, #48	; 0x30
 8002888:	f04f 0901 	mov.w	r9, #1
 800288c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002890:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002a50 <_vfiprintf_r+0x24c>
 8002894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002898:	4623      	mov	r3, r4
 800289a:	469a      	mov	sl, r3
 800289c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028a0:	b10a      	cbz	r2, 80028a6 <_vfiprintf_r+0xa2>
 80028a2:	2a25      	cmp	r2, #37	; 0x25
 80028a4:	d1f9      	bne.n	800289a <_vfiprintf_r+0x96>
 80028a6:	ebba 0b04 	subs.w	fp, sl, r4
 80028aa:	d00b      	beq.n	80028c4 <_vfiprintf_r+0xc0>
 80028ac:	465b      	mov	r3, fp
 80028ae:	4622      	mov	r2, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	4630      	mov	r0, r6
 80028b4:	f7ff ff93 	bl	80027de <__sfputs_r>
 80028b8:	3001      	adds	r0, #1
 80028ba:	f000 80aa 	beq.w	8002a12 <_vfiprintf_r+0x20e>
 80028be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028c0:	445a      	add	r2, fp
 80028c2:	9209      	str	r2, [sp, #36]	; 0x24
 80028c4:	f89a 3000 	ldrb.w	r3, [sl]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80a2 	beq.w	8002a12 <_vfiprintf_r+0x20e>
 80028ce:	2300      	movs	r3, #0
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028d8:	f10a 0a01 	add.w	sl, sl, #1
 80028dc:	9304      	str	r3, [sp, #16]
 80028de:	9307      	str	r3, [sp, #28]
 80028e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028e4:	931a      	str	r3, [sp, #104]	; 0x68
 80028e6:	4654      	mov	r4, sl
 80028e8:	2205      	movs	r2, #5
 80028ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ee:	4858      	ldr	r0, [pc, #352]	; (8002a50 <_vfiprintf_r+0x24c>)
 80028f0:	f000 fcbc 	bl	800326c <memchr>
 80028f4:	9a04      	ldr	r2, [sp, #16]
 80028f6:	b9d8      	cbnz	r0, 8002930 <_vfiprintf_r+0x12c>
 80028f8:	06d1      	lsls	r1, r2, #27
 80028fa:	bf44      	itt	mi
 80028fc:	2320      	movmi	r3, #32
 80028fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002902:	0713      	lsls	r3, r2, #28
 8002904:	bf44      	itt	mi
 8002906:	232b      	movmi	r3, #43	; 0x2b
 8002908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800290c:	f89a 3000 	ldrb.w	r3, [sl]
 8002910:	2b2a      	cmp	r3, #42	; 0x2a
 8002912:	d015      	beq.n	8002940 <_vfiprintf_r+0x13c>
 8002914:	4654      	mov	r4, sl
 8002916:	2000      	movs	r0, #0
 8002918:	f04f 0c0a 	mov.w	ip, #10
 800291c:	9a07      	ldr	r2, [sp, #28]
 800291e:	4621      	mov	r1, r4
 8002920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002924:	3b30      	subs	r3, #48	; 0x30
 8002926:	2b09      	cmp	r3, #9
 8002928:	d94e      	bls.n	80029c8 <_vfiprintf_r+0x1c4>
 800292a:	b1b0      	cbz	r0, 800295a <_vfiprintf_r+0x156>
 800292c:	9207      	str	r2, [sp, #28]
 800292e:	e014      	b.n	800295a <_vfiprintf_r+0x156>
 8002930:	eba0 0308 	sub.w	r3, r0, r8
 8002934:	fa09 f303 	lsl.w	r3, r9, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	46a2      	mov	sl, r4
 800293c:	9304      	str	r3, [sp, #16]
 800293e:	e7d2      	b.n	80028e6 <_vfiprintf_r+0xe2>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	1d19      	adds	r1, r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	9103      	str	r1, [sp, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	bfbb      	ittet	lt
 800294c:	425b      	neglt	r3, r3
 800294e:	f042 0202 	orrlt.w	r2, r2, #2
 8002952:	9307      	strge	r3, [sp, #28]
 8002954:	9307      	strlt	r3, [sp, #28]
 8002956:	bfb8      	it	lt
 8002958:	9204      	strlt	r2, [sp, #16]
 800295a:	7823      	ldrb	r3, [r4, #0]
 800295c:	2b2e      	cmp	r3, #46	; 0x2e
 800295e:	d10c      	bne.n	800297a <_vfiprintf_r+0x176>
 8002960:	7863      	ldrb	r3, [r4, #1]
 8002962:	2b2a      	cmp	r3, #42	; 0x2a
 8002964:	d135      	bne.n	80029d2 <_vfiprintf_r+0x1ce>
 8002966:	9b03      	ldr	r3, [sp, #12]
 8002968:	3402      	adds	r4, #2
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	9203      	str	r2, [sp, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	bfb8      	it	lt
 8002974:	f04f 33ff 	movlt.w	r3, #4294967295
 8002978:	9305      	str	r3, [sp, #20]
 800297a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002a60 <_vfiprintf_r+0x25c>
 800297e:	2203      	movs	r2, #3
 8002980:	4650      	mov	r0, sl
 8002982:	7821      	ldrb	r1, [r4, #0]
 8002984:	f000 fc72 	bl	800326c <memchr>
 8002988:	b140      	cbz	r0, 800299c <_vfiprintf_r+0x198>
 800298a:	2340      	movs	r3, #64	; 0x40
 800298c:	eba0 000a 	sub.w	r0, r0, sl
 8002990:	fa03 f000 	lsl.w	r0, r3, r0
 8002994:	9b04      	ldr	r3, [sp, #16]
 8002996:	3401      	adds	r4, #1
 8002998:	4303      	orrs	r3, r0
 800299a:	9304      	str	r3, [sp, #16]
 800299c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029a0:	2206      	movs	r2, #6
 80029a2:	482c      	ldr	r0, [pc, #176]	; (8002a54 <_vfiprintf_r+0x250>)
 80029a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029a8:	f000 fc60 	bl	800326c <memchr>
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d03f      	beq.n	8002a30 <_vfiprintf_r+0x22c>
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <_vfiprintf_r+0x254>)
 80029b2:	bb1b      	cbnz	r3, 80029fc <_vfiprintf_r+0x1f8>
 80029b4:	9b03      	ldr	r3, [sp, #12]
 80029b6:	3307      	adds	r3, #7
 80029b8:	f023 0307 	bic.w	r3, r3, #7
 80029bc:	3308      	adds	r3, #8
 80029be:	9303      	str	r3, [sp, #12]
 80029c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029c2:	443b      	add	r3, r7
 80029c4:	9309      	str	r3, [sp, #36]	; 0x24
 80029c6:	e767      	b.n	8002898 <_vfiprintf_r+0x94>
 80029c8:	460c      	mov	r4, r1
 80029ca:	2001      	movs	r0, #1
 80029cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80029d0:	e7a5      	b.n	800291e <_vfiprintf_r+0x11a>
 80029d2:	2300      	movs	r3, #0
 80029d4:	f04f 0c0a 	mov.w	ip, #10
 80029d8:	4619      	mov	r1, r3
 80029da:	3401      	adds	r4, #1
 80029dc:	9305      	str	r3, [sp, #20]
 80029de:	4620      	mov	r0, r4
 80029e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029e4:	3a30      	subs	r2, #48	; 0x30
 80029e6:	2a09      	cmp	r2, #9
 80029e8:	d903      	bls.n	80029f2 <_vfiprintf_r+0x1ee>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0c5      	beq.n	800297a <_vfiprintf_r+0x176>
 80029ee:	9105      	str	r1, [sp, #20]
 80029f0:	e7c3      	b.n	800297a <_vfiprintf_r+0x176>
 80029f2:	4604      	mov	r4, r0
 80029f4:	2301      	movs	r3, #1
 80029f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80029fa:	e7f0      	b.n	80029de <_vfiprintf_r+0x1da>
 80029fc:	ab03      	add	r3, sp, #12
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	462a      	mov	r2, r5
 8002a02:	4630      	mov	r0, r6
 8002a04:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_vfiprintf_r+0x258>)
 8002a06:	a904      	add	r1, sp, #16
 8002a08:	f3af 8000 	nop.w
 8002a0c:	4607      	mov	r7, r0
 8002a0e:	1c78      	adds	r0, r7, #1
 8002a10:	d1d6      	bne.n	80029c0 <_vfiprintf_r+0x1bc>
 8002a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a14:	07d9      	lsls	r1, r3, #31
 8002a16:	d405      	bmi.n	8002a24 <_vfiprintf_r+0x220>
 8002a18:	89ab      	ldrh	r3, [r5, #12]
 8002a1a:	059a      	lsls	r2, r3, #22
 8002a1c:	d402      	bmi.n	8002a24 <_vfiprintf_r+0x220>
 8002a1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a20:	f7ff fe6d 	bl	80026fe <__retarget_lock_release_recursive>
 8002a24:	89ab      	ldrh	r3, [r5, #12]
 8002a26:	065b      	lsls	r3, r3, #25
 8002a28:	f53f af12 	bmi.w	8002850 <_vfiprintf_r+0x4c>
 8002a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a2e:	e711      	b.n	8002854 <_vfiprintf_r+0x50>
 8002a30:	ab03      	add	r3, sp, #12
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	462a      	mov	r2, r5
 8002a36:	4630      	mov	r0, r6
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <_vfiprintf_r+0x258>)
 8002a3a:	a904      	add	r1, sp, #16
 8002a3c:	f000 f882 	bl	8002b44 <_printf_i>
 8002a40:	e7e4      	b.n	8002a0c <_vfiprintf_r+0x208>
 8002a42:	bf00      	nop
 8002a44:	08003420 	.word	0x08003420
 8002a48:	08003440 	.word	0x08003440
 8002a4c:	08003400 	.word	0x08003400
 8002a50:	08003460 	.word	0x08003460
 8002a54:	0800346a 	.word	0x0800346a
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	080027df 	.word	0x080027df
 8002a60:	08003466 	.word	0x08003466

08002a64 <_printf_common>:
 8002a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a68:	4616      	mov	r6, r2
 8002a6a:	4699      	mov	r9, r3
 8002a6c:	688a      	ldr	r2, [r1, #8]
 8002a6e:	690b      	ldr	r3, [r1, #16]
 8002a70:	4607      	mov	r7, r0
 8002a72:	4293      	cmp	r3, r2
 8002a74:	bfb8      	it	lt
 8002a76:	4613      	movlt	r3, r2
 8002a78:	6033      	str	r3, [r6, #0]
 8002a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a7e:	460c      	mov	r4, r1
 8002a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a84:	b10a      	cbz	r2, 8002a8a <_printf_common+0x26>
 8002a86:	3301      	adds	r3, #1
 8002a88:	6033      	str	r3, [r6, #0]
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	0699      	lsls	r1, r3, #26
 8002a8e:	bf42      	ittt	mi
 8002a90:	6833      	ldrmi	r3, [r6, #0]
 8002a92:	3302      	addmi	r3, #2
 8002a94:	6033      	strmi	r3, [r6, #0]
 8002a96:	6825      	ldr	r5, [r4, #0]
 8002a98:	f015 0506 	ands.w	r5, r5, #6
 8002a9c:	d106      	bne.n	8002aac <_printf_common+0x48>
 8002a9e:	f104 0a19 	add.w	sl, r4, #25
 8002aa2:	68e3      	ldr	r3, [r4, #12]
 8002aa4:	6832      	ldr	r2, [r6, #0]
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	42ab      	cmp	r3, r5
 8002aaa:	dc28      	bgt.n	8002afe <_printf_common+0x9a>
 8002aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ab0:	1e13      	subs	r3, r2, #0
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	bf18      	it	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	0692      	lsls	r2, r2, #26
 8002aba:	d42d      	bmi.n	8002b18 <_printf_common+0xb4>
 8002abc:	4649      	mov	r1, r9
 8002abe:	4638      	mov	r0, r7
 8002ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ac4:	47c0      	blx	r8
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d020      	beq.n	8002b0c <_printf_common+0xa8>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	68e5      	ldr	r5, [r4, #12]
 8002ace:	f003 0306 	and.w	r3, r3, #6
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	bf18      	it	ne
 8002ad6:	2500      	movne	r5, #0
 8002ad8:	6832      	ldr	r2, [r6, #0]
 8002ada:	f04f 0600 	mov.w	r6, #0
 8002ade:	68a3      	ldr	r3, [r4, #8]
 8002ae0:	bf08      	it	eq
 8002ae2:	1aad      	subeq	r5, r5, r2
 8002ae4:	6922      	ldr	r2, [r4, #16]
 8002ae6:	bf08      	it	eq
 8002ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bfc4      	itt	gt
 8002af0:	1a9b      	subgt	r3, r3, r2
 8002af2:	18ed      	addgt	r5, r5, r3
 8002af4:	341a      	adds	r4, #26
 8002af6:	42b5      	cmp	r5, r6
 8002af8:	d11a      	bne.n	8002b30 <_printf_common+0xcc>
 8002afa:	2000      	movs	r0, #0
 8002afc:	e008      	b.n	8002b10 <_printf_common+0xac>
 8002afe:	2301      	movs	r3, #1
 8002b00:	4652      	mov	r2, sl
 8002b02:	4649      	mov	r1, r9
 8002b04:	4638      	mov	r0, r7
 8002b06:	47c0      	blx	r8
 8002b08:	3001      	adds	r0, #1
 8002b0a:	d103      	bne.n	8002b14 <_printf_common+0xb0>
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b14:	3501      	adds	r5, #1
 8002b16:	e7c4      	b.n	8002aa2 <_printf_common+0x3e>
 8002b18:	2030      	movs	r0, #48	; 0x30
 8002b1a:	18e1      	adds	r1, r4, r3
 8002b1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b26:	4422      	add	r2, r4
 8002b28:	3302      	adds	r3, #2
 8002b2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b2e:	e7c5      	b.n	8002abc <_printf_common+0x58>
 8002b30:	2301      	movs	r3, #1
 8002b32:	4622      	mov	r2, r4
 8002b34:	4649      	mov	r1, r9
 8002b36:	4638      	mov	r0, r7
 8002b38:	47c0      	blx	r8
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	d0e6      	beq.n	8002b0c <_printf_common+0xa8>
 8002b3e:	3601      	adds	r6, #1
 8002b40:	e7d9      	b.n	8002af6 <_printf_common+0x92>
	...

08002b44 <_printf_i>:
 8002b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b48:	460c      	mov	r4, r1
 8002b4a:	7e27      	ldrb	r7, [r4, #24]
 8002b4c:	4691      	mov	r9, r2
 8002b4e:	2f78      	cmp	r7, #120	; 0x78
 8002b50:	4680      	mov	r8, r0
 8002b52:	469a      	mov	sl, r3
 8002b54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b5a:	d807      	bhi.n	8002b6c <_printf_i+0x28>
 8002b5c:	2f62      	cmp	r7, #98	; 0x62
 8002b5e:	d80a      	bhi.n	8002b76 <_printf_i+0x32>
 8002b60:	2f00      	cmp	r7, #0
 8002b62:	f000 80d9 	beq.w	8002d18 <_printf_i+0x1d4>
 8002b66:	2f58      	cmp	r7, #88	; 0x58
 8002b68:	f000 80a4 	beq.w	8002cb4 <_printf_i+0x170>
 8002b6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b74:	e03a      	b.n	8002bec <_printf_i+0xa8>
 8002b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b7a:	2b15      	cmp	r3, #21
 8002b7c:	d8f6      	bhi.n	8002b6c <_printf_i+0x28>
 8002b7e:	a001      	add	r0, pc, #4	; (adr r0, 8002b84 <_printf_i+0x40>)
 8002b80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b84:	08002bdd 	.word	0x08002bdd
 8002b88:	08002bf1 	.word	0x08002bf1
 8002b8c:	08002b6d 	.word	0x08002b6d
 8002b90:	08002b6d 	.word	0x08002b6d
 8002b94:	08002b6d 	.word	0x08002b6d
 8002b98:	08002b6d 	.word	0x08002b6d
 8002b9c:	08002bf1 	.word	0x08002bf1
 8002ba0:	08002b6d 	.word	0x08002b6d
 8002ba4:	08002b6d 	.word	0x08002b6d
 8002ba8:	08002b6d 	.word	0x08002b6d
 8002bac:	08002b6d 	.word	0x08002b6d
 8002bb0:	08002cff 	.word	0x08002cff
 8002bb4:	08002c21 	.word	0x08002c21
 8002bb8:	08002ce1 	.word	0x08002ce1
 8002bbc:	08002b6d 	.word	0x08002b6d
 8002bc0:	08002b6d 	.word	0x08002b6d
 8002bc4:	08002d21 	.word	0x08002d21
 8002bc8:	08002b6d 	.word	0x08002b6d
 8002bcc:	08002c21 	.word	0x08002c21
 8002bd0:	08002b6d 	.word	0x08002b6d
 8002bd4:	08002b6d 	.word	0x08002b6d
 8002bd8:	08002ce9 	.word	0x08002ce9
 8002bdc:	680b      	ldr	r3, [r1, #0]
 8002bde:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002be2:	1d1a      	adds	r2, r3, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	600a      	str	r2, [r1, #0]
 8002be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0a4      	b.n	8002d3a <_printf_i+0x1f6>
 8002bf0:	6825      	ldr	r5, [r4, #0]
 8002bf2:	6808      	ldr	r0, [r1, #0]
 8002bf4:	062e      	lsls	r6, r5, #24
 8002bf6:	f100 0304 	add.w	r3, r0, #4
 8002bfa:	d50a      	bpl.n	8002c12 <_printf_i+0xce>
 8002bfc:	6805      	ldr	r5, [r0, #0]
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	da03      	bge.n	8002c0c <_printf_i+0xc8>
 8002c04:	232d      	movs	r3, #45	; 0x2d
 8002c06:	426d      	negs	r5, r5
 8002c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c0c:	230a      	movs	r3, #10
 8002c0e:	485e      	ldr	r0, [pc, #376]	; (8002d88 <_printf_i+0x244>)
 8002c10:	e019      	b.n	8002c46 <_printf_i+0x102>
 8002c12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c16:	6805      	ldr	r5, [r0, #0]
 8002c18:	600b      	str	r3, [r1, #0]
 8002c1a:	bf18      	it	ne
 8002c1c:	b22d      	sxthne	r5, r5
 8002c1e:	e7ef      	b.n	8002c00 <_printf_i+0xbc>
 8002c20:	680b      	ldr	r3, [r1, #0]
 8002c22:	6825      	ldr	r5, [r4, #0]
 8002c24:	1d18      	adds	r0, r3, #4
 8002c26:	6008      	str	r0, [r1, #0]
 8002c28:	0628      	lsls	r0, r5, #24
 8002c2a:	d501      	bpl.n	8002c30 <_printf_i+0xec>
 8002c2c:	681d      	ldr	r5, [r3, #0]
 8002c2e:	e002      	b.n	8002c36 <_printf_i+0xf2>
 8002c30:	0669      	lsls	r1, r5, #25
 8002c32:	d5fb      	bpl.n	8002c2c <_printf_i+0xe8>
 8002c34:	881d      	ldrh	r5, [r3, #0]
 8002c36:	2f6f      	cmp	r7, #111	; 0x6f
 8002c38:	bf0c      	ite	eq
 8002c3a:	2308      	moveq	r3, #8
 8002c3c:	230a      	movne	r3, #10
 8002c3e:	4852      	ldr	r0, [pc, #328]	; (8002d88 <_printf_i+0x244>)
 8002c40:	2100      	movs	r1, #0
 8002c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c46:	6866      	ldr	r6, [r4, #4]
 8002c48:	2e00      	cmp	r6, #0
 8002c4a:	bfa8      	it	ge
 8002c4c:	6821      	ldrge	r1, [r4, #0]
 8002c4e:	60a6      	str	r6, [r4, #8]
 8002c50:	bfa4      	itt	ge
 8002c52:	f021 0104 	bicge.w	r1, r1, #4
 8002c56:	6021      	strge	r1, [r4, #0]
 8002c58:	b90d      	cbnz	r5, 8002c5e <_printf_i+0x11a>
 8002c5a:	2e00      	cmp	r6, #0
 8002c5c:	d04d      	beq.n	8002cfa <_printf_i+0x1b6>
 8002c5e:	4616      	mov	r6, r2
 8002c60:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c64:	fb03 5711 	mls	r7, r3, r1, r5
 8002c68:	5dc7      	ldrb	r7, [r0, r7]
 8002c6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c6e:	462f      	mov	r7, r5
 8002c70:	42bb      	cmp	r3, r7
 8002c72:	460d      	mov	r5, r1
 8002c74:	d9f4      	bls.n	8002c60 <_printf_i+0x11c>
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d10b      	bne.n	8002c92 <_printf_i+0x14e>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	07df      	lsls	r7, r3, #31
 8002c7e:	d508      	bpl.n	8002c92 <_printf_i+0x14e>
 8002c80:	6923      	ldr	r3, [r4, #16]
 8002c82:	6861      	ldr	r1, [r4, #4]
 8002c84:	4299      	cmp	r1, r3
 8002c86:	bfde      	ittt	le
 8002c88:	2330      	movle	r3, #48	; 0x30
 8002c8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c92:	1b92      	subs	r2, r2, r6
 8002c94:	6122      	str	r2, [r4, #16]
 8002c96:	464b      	mov	r3, r9
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	f8cd a000 	str.w	sl, [sp]
 8002ca0:	aa03      	add	r2, sp, #12
 8002ca2:	f7ff fedf 	bl	8002a64 <_printf_common>
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d14c      	bne.n	8002d44 <_printf_i+0x200>
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	b004      	add	sp, #16
 8002cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb4:	4834      	ldr	r0, [pc, #208]	; (8002d88 <_printf_i+0x244>)
 8002cb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cba:	680e      	ldr	r6, [r1, #0]
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8002cc2:	061f      	lsls	r7, r3, #24
 8002cc4:	600e      	str	r6, [r1, #0]
 8002cc6:	d514      	bpl.n	8002cf2 <_printf_i+0x1ae>
 8002cc8:	07d9      	lsls	r1, r3, #31
 8002cca:	bf44      	itt	mi
 8002ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8002cd0:	6023      	strmi	r3, [r4, #0]
 8002cd2:	b91d      	cbnz	r5, 8002cdc <_printf_i+0x198>
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f023 0320 	bic.w	r3, r3, #32
 8002cda:	6023      	str	r3, [r4, #0]
 8002cdc:	2310      	movs	r3, #16
 8002cde:	e7af      	b.n	8002c40 <_printf_i+0xfc>
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f043 0320 	orr.w	r3, r3, #32
 8002ce6:	6023      	str	r3, [r4, #0]
 8002ce8:	2378      	movs	r3, #120	; 0x78
 8002cea:	4828      	ldr	r0, [pc, #160]	; (8002d8c <_printf_i+0x248>)
 8002cec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cf0:	e7e3      	b.n	8002cba <_printf_i+0x176>
 8002cf2:	065e      	lsls	r6, r3, #25
 8002cf4:	bf48      	it	mi
 8002cf6:	b2ad      	uxthmi	r5, r5
 8002cf8:	e7e6      	b.n	8002cc8 <_printf_i+0x184>
 8002cfa:	4616      	mov	r6, r2
 8002cfc:	e7bb      	b.n	8002c76 <_printf_i+0x132>
 8002cfe:	680b      	ldr	r3, [r1, #0]
 8002d00:	6826      	ldr	r6, [r4, #0]
 8002d02:	1d1d      	adds	r5, r3, #4
 8002d04:	6960      	ldr	r0, [r4, #20]
 8002d06:	600d      	str	r5, [r1, #0]
 8002d08:	0635      	lsls	r5, r6, #24
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	d501      	bpl.n	8002d12 <_printf_i+0x1ce>
 8002d0e:	6018      	str	r0, [r3, #0]
 8002d10:	e002      	b.n	8002d18 <_printf_i+0x1d4>
 8002d12:	0671      	lsls	r1, r6, #25
 8002d14:	d5fb      	bpl.n	8002d0e <_printf_i+0x1ca>
 8002d16:	8018      	strh	r0, [r3, #0]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	4616      	mov	r6, r2
 8002d1c:	6123      	str	r3, [r4, #16]
 8002d1e:	e7ba      	b.n	8002c96 <_printf_i+0x152>
 8002d20:	680b      	ldr	r3, [r1, #0]
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	600a      	str	r2, [r1, #0]
 8002d26:	681e      	ldr	r6, [r3, #0]
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	6862      	ldr	r2, [r4, #4]
 8002d2e:	f000 fa9d 	bl	800326c <memchr>
 8002d32:	b108      	cbz	r0, 8002d38 <_printf_i+0x1f4>
 8002d34:	1b80      	subs	r0, r0, r6
 8002d36:	6060      	str	r0, [r4, #4]
 8002d38:	6863      	ldr	r3, [r4, #4]
 8002d3a:	6123      	str	r3, [r4, #16]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d42:	e7a8      	b.n	8002c96 <_printf_i+0x152>
 8002d44:	4632      	mov	r2, r6
 8002d46:	4649      	mov	r1, r9
 8002d48:	4640      	mov	r0, r8
 8002d4a:	6923      	ldr	r3, [r4, #16]
 8002d4c:	47d0      	blx	sl
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d0ab      	beq.n	8002caa <_printf_i+0x166>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	079b      	lsls	r3, r3, #30
 8002d56:	d413      	bmi.n	8002d80 <_printf_i+0x23c>
 8002d58:	68e0      	ldr	r0, [r4, #12]
 8002d5a:	9b03      	ldr	r3, [sp, #12]
 8002d5c:	4298      	cmp	r0, r3
 8002d5e:	bfb8      	it	lt
 8002d60:	4618      	movlt	r0, r3
 8002d62:	e7a4      	b.n	8002cae <_printf_i+0x16a>
 8002d64:	2301      	movs	r3, #1
 8002d66:	4632      	mov	r2, r6
 8002d68:	4649      	mov	r1, r9
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	47d0      	blx	sl
 8002d6e:	3001      	adds	r0, #1
 8002d70:	d09b      	beq.n	8002caa <_printf_i+0x166>
 8002d72:	3501      	adds	r5, #1
 8002d74:	68e3      	ldr	r3, [r4, #12]
 8002d76:	9903      	ldr	r1, [sp, #12]
 8002d78:	1a5b      	subs	r3, r3, r1
 8002d7a:	42ab      	cmp	r3, r5
 8002d7c:	dcf2      	bgt.n	8002d64 <_printf_i+0x220>
 8002d7e:	e7eb      	b.n	8002d58 <_printf_i+0x214>
 8002d80:	2500      	movs	r5, #0
 8002d82:	f104 0619 	add.w	r6, r4, #25
 8002d86:	e7f5      	b.n	8002d74 <_printf_i+0x230>
 8002d88:	08003471 	.word	0x08003471
 8002d8c:	08003482 	.word	0x08003482

08002d90 <_sbrk_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	2300      	movs	r3, #0
 8002d94:	4d05      	ldr	r5, [pc, #20]	; (8002dac <_sbrk_r+0x1c>)
 8002d96:	4604      	mov	r4, r0
 8002d98:	4608      	mov	r0, r1
 8002d9a:	602b      	str	r3, [r5, #0]
 8002d9c:	f7fd fcc4 	bl	8000728 <_sbrk>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d102      	bne.n	8002daa <_sbrk_r+0x1a>
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	b103      	cbz	r3, 8002daa <_sbrk_r+0x1a>
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	2000034c 	.word	0x2000034c

08002db0 <__sread>:
 8002db0:	b510      	push	{r4, lr}
 8002db2:	460c      	mov	r4, r1
 8002db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db8:	f000 fabe 	bl	8003338 <_read_r>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	bfab      	itete	ge
 8002dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8002dc4:	181b      	addge	r3, r3, r0
 8002dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002dca:	bfac      	ite	ge
 8002dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002dce:	81a3      	strhlt	r3, [r4, #12]
 8002dd0:	bd10      	pop	{r4, pc}

08002dd2 <__swrite>:
 8002dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd6:	461f      	mov	r7, r3
 8002dd8:	898b      	ldrh	r3, [r1, #12]
 8002dda:	4605      	mov	r5, r0
 8002ddc:	05db      	lsls	r3, r3, #23
 8002dde:	460c      	mov	r4, r1
 8002de0:	4616      	mov	r6, r2
 8002de2:	d505      	bpl.n	8002df0 <__swrite+0x1e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	2200      	movs	r2, #0
 8002de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dec:	f000 f9c8 	bl	8003180 <_lseek_r>
 8002df0:	89a3      	ldrh	r3, [r4, #12]
 8002df2:	4632      	mov	r2, r6
 8002df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e06:	f000 b869 	b.w	8002edc <_write_r>

08002e0a <__sseek>:
 8002e0a:	b510      	push	{r4, lr}
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e12:	f000 f9b5 	bl	8003180 <_lseek_r>
 8002e16:	1c43      	adds	r3, r0, #1
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	bf15      	itete	ne
 8002e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e26:	81a3      	strheq	r3, [r4, #12]
 8002e28:	bf18      	it	ne
 8002e2a:	81a3      	strhne	r3, [r4, #12]
 8002e2c:	bd10      	pop	{r4, pc}

08002e2e <__sclose>:
 8002e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e32:	f000 b8d3 	b.w	8002fdc <_close_r>
	...

08002e38 <__swbuf_r>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	460e      	mov	r6, r1
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	4605      	mov	r5, r0
 8002e40:	b118      	cbz	r0, 8002e4a <__swbuf_r+0x12>
 8002e42:	6983      	ldr	r3, [r0, #24]
 8002e44:	b90b      	cbnz	r3, 8002e4a <__swbuf_r+0x12>
 8002e46:	f7ff fbbb 	bl	80025c0 <__sinit>
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <__swbuf_r+0x98>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d12b      	bne.n	8002ea8 <__swbuf_r+0x70>
 8002e50:	686c      	ldr	r4, [r5, #4]
 8002e52:	69a3      	ldr	r3, [r4, #24]
 8002e54:	60a3      	str	r3, [r4, #8]
 8002e56:	89a3      	ldrh	r3, [r4, #12]
 8002e58:	071a      	lsls	r2, r3, #28
 8002e5a:	d52f      	bpl.n	8002ebc <__swbuf_r+0x84>
 8002e5c:	6923      	ldr	r3, [r4, #16]
 8002e5e:	b36b      	cbz	r3, 8002ebc <__swbuf_r+0x84>
 8002e60:	6923      	ldr	r3, [r4, #16]
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	b2f6      	uxtb	r6, r6
 8002e66:	1ac0      	subs	r0, r0, r3
 8002e68:	6963      	ldr	r3, [r4, #20]
 8002e6a:	4637      	mov	r7, r6
 8002e6c:	4283      	cmp	r3, r0
 8002e6e:	dc04      	bgt.n	8002e7a <__swbuf_r+0x42>
 8002e70:	4621      	mov	r1, r4
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 f948 	bl	8003108 <_fflush_r>
 8002e78:	bb30      	cbnz	r0, 8002ec8 <__swbuf_r+0x90>
 8002e7a:	68a3      	ldr	r3, [r4, #8]
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	60a3      	str	r3, [r4, #8]
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	6022      	str	r2, [r4, #0]
 8002e88:	701e      	strb	r6, [r3, #0]
 8002e8a:	6963      	ldr	r3, [r4, #20]
 8002e8c:	4283      	cmp	r3, r0
 8002e8e:	d004      	beq.n	8002e9a <__swbuf_r+0x62>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	07db      	lsls	r3, r3, #31
 8002e94:	d506      	bpl.n	8002ea4 <__swbuf_r+0x6c>
 8002e96:	2e0a      	cmp	r6, #10
 8002e98:	d104      	bne.n	8002ea4 <__swbuf_r+0x6c>
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f000 f933 	bl	8003108 <_fflush_r>
 8002ea2:	b988      	cbnz	r0, 8002ec8 <__swbuf_r+0x90>
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <__swbuf_r+0x9c>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d101      	bne.n	8002eb2 <__swbuf_r+0x7a>
 8002eae:	68ac      	ldr	r4, [r5, #8]
 8002eb0:	e7cf      	b.n	8002e52 <__swbuf_r+0x1a>
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <__swbuf_r+0xa0>)
 8002eb4:	429c      	cmp	r4, r3
 8002eb6:	bf08      	it	eq
 8002eb8:	68ec      	ldreq	r4, [r5, #12]
 8002eba:	e7ca      	b.n	8002e52 <__swbuf_r+0x1a>
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f000 f81e 	bl	8002f00 <__swsetup_r>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d0cb      	beq.n	8002e60 <__swbuf_r+0x28>
 8002ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8002ecc:	e7ea      	b.n	8002ea4 <__swbuf_r+0x6c>
 8002ece:	bf00      	nop
 8002ed0:	08003420 	.word	0x08003420
 8002ed4:	08003440 	.word	0x08003440
 8002ed8:	08003400 	.word	0x08003400

08002edc <_write_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4d05      	ldr	r5, [pc, #20]	; (8002efc <_write_r+0x20>)
 8002ee8:	602a      	str	r2, [r5, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7fd f92e 	bl	800014c <_write>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_write_r+0x1e>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_write_r+0x1e>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	2000034c 	.word	0x2000034c

08002f00 <__swsetup_r>:
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <__swsetup_r+0xcc>)
 8002f02:	b570      	push	{r4, r5, r6, lr}
 8002f04:	681d      	ldr	r5, [r3, #0]
 8002f06:	4606      	mov	r6, r0
 8002f08:	460c      	mov	r4, r1
 8002f0a:	b125      	cbz	r5, 8002f16 <__swsetup_r+0x16>
 8002f0c:	69ab      	ldr	r3, [r5, #24]
 8002f0e:	b913      	cbnz	r3, 8002f16 <__swsetup_r+0x16>
 8002f10:	4628      	mov	r0, r5
 8002f12:	f7ff fb55 	bl	80025c0 <__sinit>
 8002f16:	4b2e      	ldr	r3, [pc, #184]	; (8002fd0 <__swsetup_r+0xd0>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d10f      	bne.n	8002f3c <__swsetup_r+0x3c>
 8002f1c:	686c      	ldr	r4, [r5, #4]
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f24:	0719      	lsls	r1, r3, #28
 8002f26:	d42c      	bmi.n	8002f82 <__swsetup_r+0x82>
 8002f28:	06dd      	lsls	r5, r3, #27
 8002f2a:	d411      	bmi.n	8002f50 <__swsetup_r+0x50>
 8002f2c:	2309      	movs	r3, #9
 8002f2e:	6033      	str	r3, [r6, #0]
 8002f30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	e03e      	b.n	8002fba <__swsetup_r+0xba>
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <__swsetup_r+0xd4>)
 8002f3e:	429c      	cmp	r4, r3
 8002f40:	d101      	bne.n	8002f46 <__swsetup_r+0x46>
 8002f42:	68ac      	ldr	r4, [r5, #8]
 8002f44:	e7eb      	b.n	8002f1e <__swsetup_r+0x1e>
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <__swsetup_r+0xd8>)
 8002f48:	429c      	cmp	r4, r3
 8002f4a:	bf08      	it	eq
 8002f4c:	68ec      	ldreq	r4, [r5, #12]
 8002f4e:	e7e6      	b.n	8002f1e <__swsetup_r+0x1e>
 8002f50:	0758      	lsls	r0, r3, #29
 8002f52:	d512      	bpl.n	8002f7a <__swsetup_r+0x7a>
 8002f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f56:	b141      	cbz	r1, 8002f6a <__swsetup_r+0x6a>
 8002f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	d002      	beq.n	8002f66 <__swsetup_r+0x66>
 8002f60:	4630      	mov	r0, r6
 8002f62:	f000 f99d 	bl	80032a0 <_free_r>
 8002f66:	2300      	movs	r3, #0
 8002f68:	6363      	str	r3, [r4, #52]	; 0x34
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f70:	81a3      	strh	r3, [r4, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	6923      	ldr	r3, [r4, #16]
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	81a3      	strh	r3, [r4, #12]
 8002f82:	6923      	ldr	r3, [r4, #16]
 8002f84:	b94b      	cbnz	r3, 8002f9a <__swsetup_r+0x9a>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d003      	beq.n	8002f9a <__swsetup_r+0x9a>
 8002f92:	4621      	mov	r1, r4
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 f929 	bl	80031ec <__smakebuf_r>
 8002f9a:	89a0      	ldrh	r0, [r4, #12]
 8002f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fa0:	f010 0301 	ands.w	r3, r0, #1
 8002fa4:	d00a      	beq.n	8002fbc <__swsetup_r+0xbc>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60a3      	str	r3, [r4, #8]
 8002faa:	6963      	ldr	r3, [r4, #20]
 8002fac:	425b      	negs	r3, r3
 8002fae:	61a3      	str	r3, [r4, #24]
 8002fb0:	6923      	ldr	r3, [r4, #16]
 8002fb2:	b943      	cbnz	r3, 8002fc6 <__swsetup_r+0xc6>
 8002fb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002fb8:	d1ba      	bne.n	8002f30 <__swsetup_r+0x30>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	0781      	lsls	r1, r0, #30
 8002fbe:	bf58      	it	pl
 8002fc0:	6963      	ldrpl	r3, [r4, #20]
 8002fc2:	60a3      	str	r3, [r4, #8]
 8002fc4:	e7f4      	b.n	8002fb0 <__swsetup_r+0xb0>
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	e7f7      	b.n	8002fba <__swsetup_r+0xba>
 8002fca:	bf00      	nop
 8002fcc:	20000010 	.word	0x20000010
 8002fd0:	08003420 	.word	0x08003420
 8002fd4:	08003440 	.word	0x08003440
 8002fd8:	08003400 	.word	0x08003400

08002fdc <_close_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	2300      	movs	r3, #0
 8002fe0:	4d05      	ldr	r5, [pc, #20]	; (8002ff8 <_close_r+0x1c>)
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	602b      	str	r3, [r5, #0]
 8002fe8:	f7fd fb6d 	bl	80006c6 <_close>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d102      	bne.n	8002ff6 <_close_r+0x1a>
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	b103      	cbz	r3, 8002ff6 <_close_r+0x1a>
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	2000034c 	.word	0x2000034c

08002ffc <__sflush_r>:
 8002ffc:	898a      	ldrh	r2, [r1, #12]
 8002ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	4605      	mov	r5, r0
 8003004:	0710      	lsls	r0, r2, #28
 8003006:	460c      	mov	r4, r1
 8003008:	d458      	bmi.n	80030bc <__sflush_r+0xc0>
 800300a:	684b      	ldr	r3, [r1, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	dc05      	bgt.n	800301c <__sflush_r+0x20>
 8003010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	dc02      	bgt.n	800301c <__sflush_r+0x20>
 8003016:	2000      	movs	r0, #0
 8003018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800301c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800301e:	2e00      	cmp	r6, #0
 8003020:	d0f9      	beq.n	8003016 <__sflush_r+0x1a>
 8003022:	2300      	movs	r3, #0
 8003024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003028:	682f      	ldr	r7, [r5, #0]
 800302a:	602b      	str	r3, [r5, #0]
 800302c:	d032      	beq.n	8003094 <__sflush_r+0x98>
 800302e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	075a      	lsls	r2, r3, #29
 8003034:	d505      	bpl.n	8003042 <__sflush_r+0x46>
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	1ac0      	subs	r0, r0, r3
 800303a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800303c:	b10b      	cbz	r3, 8003042 <__sflush_r+0x46>
 800303e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003040:	1ac0      	subs	r0, r0, r3
 8003042:	2300      	movs	r3, #0
 8003044:	4602      	mov	r2, r0
 8003046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003048:	4628      	mov	r0, r5
 800304a:	6a21      	ldr	r1, [r4, #32]
 800304c:	47b0      	blx	r6
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	d106      	bne.n	8003062 <__sflush_r+0x66>
 8003054:	6829      	ldr	r1, [r5, #0]
 8003056:	291d      	cmp	r1, #29
 8003058:	d82c      	bhi.n	80030b4 <__sflush_r+0xb8>
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <__sflush_r+0x108>)
 800305c:	40ca      	lsrs	r2, r1
 800305e:	07d6      	lsls	r6, r2, #31
 8003060:	d528      	bpl.n	80030b4 <__sflush_r+0xb8>
 8003062:	2200      	movs	r2, #0
 8003064:	6062      	str	r2, [r4, #4]
 8003066:	6922      	ldr	r2, [r4, #16]
 8003068:	04d9      	lsls	r1, r3, #19
 800306a:	6022      	str	r2, [r4, #0]
 800306c:	d504      	bpl.n	8003078 <__sflush_r+0x7c>
 800306e:	1c42      	adds	r2, r0, #1
 8003070:	d101      	bne.n	8003076 <__sflush_r+0x7a>
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	b903      	cbnz	r3, 8003078 <__sflush_r+0x7c>
 8003076:	6560      	str	r0, [r4, #84]	; 0x54
 8003078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800307a:	602f      	str	r7, [r5, #0]
 800307c:	2900      	cmp	r1, #0
 800307e:	d0ca      	beq.n	8003016 <__sflush_r+0x1a>
 8003080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003084:	4299      	cmp	r1, r3
 8003086:	d002      	beq.n	800308e <__sflush_r+0x92>
 8003088:	4628      	mov	r0, r5
 800308a:	f000 f909 	bl	80032a0 <_free_r>
 800308e:	2000      	movs	r0, #0
 8003090:	6360      	str	r0, [r4, #52]	; 0x34
 8003092:	e7c1      	b.n	8003018 <__sflush_r+0x1c>
 8003094:	6a21      	ldr	r1, [r4, #32]
 8003096:	2301      	movs	r3, #1
 8003098:	4628      	mov	r0, r5
 800309a:	47b0      	blx	r6
 800309c:	1c41      	adds	r1, r0, #1
 800309e:	d1c7      	bne.n	8003030 <__sflush_r+0x34>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0c4      	beq.n	8003030 <__sflush_r+0x34>
 80030a6:	2b1d      	cmp	r3, #29
 80030a8:	d001      	beq.n	80030ae <__sflush_r+0xb2>
 80030aa:	2b16      	cmp	r3, #22
 80030ac:	d101      	bne.n	80030b2 <__sflush_r+0xb6>
 80030ae:	602f      	str	r7, [r5, #0]
 80030b0:	e7b1      	b.n	8003016 <__sflush_r+0x1a>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	e7ad      	b.n	8003018 <__sflush_r+0x1c>
 80030bc:	690f      	ldr	r7, [r1, #16]
 80030be:	2f00      	cmp	r7, #0
 80030c0:	d0a9      	beq.n	8003016 <__sflush_r+0x1a>
 80030c2:	0793      	lsls	r3, r2, #30
 80030c4:	bf18      	it	ne
 80030c6:	2300      	movne	r3, #0
 80030c8:	680e      	ldr	r6, [r1, #0]
 80030ca:	bf08      	it	eq
 80030cc:	694b      	ldreq	r3, [r1, #20]
 80030ce:	eba6 0807 	sub.w	r8, r6, r7
 80030d2:	600f      	str	r7, [r1, #0]
 80030d4:	608b      	str	r3, [r1, #8]
 80030d6:	f1b8 0f00 	cmp.w	r8, #0
 80030da:	dd9c      	ble.n	8003016 <__sflush_r+0x1a>
 80030dc:	4643      	mov	r3, r8
 80030de:	463a      	mov	r2, r7
 80030e0:	4628      	mov	r0, r5
 80030e2:	6a21      	ldr	r1, [r4, #32]
 80030e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030e6:	47b0      	blx	r6
 80030e8:	2800      	cmp	r0, #0
 80030ea:	dc06      	bgt.n	80030fa <__sflush_r+0xfe>
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295
 80030f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030f6:	81a3      	strh	r3, [r4, #12]
 80030f8:	e78e      	b.n	8003018 <__sflush_r+0x1c>
 80030fa:	4407      	add	r7, r0
 80030fc:	eba8 0800 	sub.w	r8, r8, r0
 8003100:	e7e9      	b.n	80030d6 <__sflush_r+0xda>
 8003102:	bf00      	nop
 8003104:	20400001 	.word	0x20400001

08003108 <_fflush_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	690b      	ldr	r3, [r1, #16]
 800310c:	4605      	mov	r5, r0
 800310e:	460c      	mov	r4, r1
 8003110:	b913      	cbnz	r3, 8003118 <_fflush_r+0x10>
 8003112:	2500      	movs	r5, #0
 8003114:	4628      	mov	r0, r5
 8003116:	bd38      	pop	{r3, r4, r5, pc}
 8003118:	b118      	cbz	r0, 8003122 <_fflush_r+0x1a>
 800311a:	6983      	ldr	r3, [r0, #24]
 800311c:	b90b      	cbnz	r3, 8003122 <_fflush_r+0x1a>
 800311e:	f7ff fa4f 	bl	80025c0 <__sinit>
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <_fflush_r+0x6c>)
 8003124:	429c      	cmp	r4, r3
 8003126:	d11b      	bne.n	8003160 <_fflush_r+0x58>
 8003128:	686c      	ldr	r4, [r5, #4]
 800312a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0ef      	beq.n	8003112 <_fflush_r+0xa>
 8003132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003134:	07d0      	lsls	r0, r2, #31
 8003136:	d404      	bmi.n	8003142 <_fflush_r+0x3a>
 8003138:	0599      	lsls	r1, r3, #22
 800313a:	d402      	bmi.n	8003142 <_fflush_r+0x3a>
 800313c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800313e:	f7ff fadd 	bl	80026fc <__retarget_lock_acquire_recursive>
 8003142:	4628      	mov	r0, r5
 8003144:	4621      	mov	r1, r4
 8003146:	f7ff ff59 	bl	8002ffc <__sflush_r>
 800314a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800314c:	4605      	mov	r5, r0
 800314e:	07da      	lsls	r2, r3, #31
 8003150:	d4e0      	bmi.n	8003114 <_fflush_r+0xc>
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	059b      	lsls	r3, r3, #22
 8003156:	d4dd      	bmi.n	8003114 <_fflush_r+0xc>
 8003158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315a:	f7ff fad0 	bl	80026fe <__retarget_lock_release_recursive>
 800315e:	e7d9      	b.n	8003114 <_fflush_r+0xc>
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <_fflush_r+0x70>)
 8003162:	429c      	cmp	r4, r3
 8003164:	d101      	bne.n	800316a <_fflush_r+0x62>
 8003166:	68ac      	ldr	r4, [r5, #8]
 8003168:	e7df      	b.n	800312a <_fflush_r+0x22>
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <_fflush_r+0x74>)
 800316c:	429c      	cmp	r4, r3
 800316e:	bf08      	it	eq
 8003170:	68ec      	ldreq	r4, [r5, #12]
 8003172:	e7da      	b.n	800312a <_fflush_r+0x22>
 8003174:	08003420 	.word	0x08003420
 8003178:	08003440 	.word	0x08003440
 800317c:	08003400 	.word	0x08003400

08003180 <_lseek_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	2200      	movs	r2, #0
 800318a:	4d05      	ldr	r5, [pc, #20]	; (80031a0 <_lseek_r+0x20>)
 800318c:	602a      	str	r2, [r5, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	f7fd fabd 	bl	800070e <_lseek>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_lseek_r+0x1e>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_lseek_r+0x1e>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	2000034c 	.word	0x2000034c

080031a4 <__swhatbuf_r>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	460e      	mov	r6, r1
 80031a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ac:	4614      	mov	r4, r2
 80031ae:	2900      	cmp	r1, #0
 80031b0:	461d      	mov	r5, r3
 80031b2:	b096      	sub	sp, #88	; 0x58
 80031b4:	da07      	bge.n	80031c6 <__swhatbuf_r+0x22>
 80031b6:	2300      	movs	r3, #0
 80031b8:	602b      	str	r3, [r5, #0]
 80031ba:	89b3      	ldrh	r3, [r6, #12]
 80031bc:	061a      	lsls	r2, r3, #24
 80031be:	d410      	bmi.n	80031e2 <__swhatbuf_r+0x3e>
 80031c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c4:	e00e      	b.n	80031e4 <__swhatbuf_r+0x40>
 80031c6:	466a      	mov	r2, sp
 80031c8:	f000 f8c8 	bl	800335c <_fstat_r>
 80031cc:	2800      	cmp	r0, #0
 80031ce:	dbf2      	blt.n	80031b6 <__swhatbuf_r+0x12>
 80031d0:	9a01      	ldr	r2, [sp, #4]
 80031d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031da:	425a      	negs	r2, r3
 80031dc:	415a      	adcs	r2, r3
 80031de:	602a      	str	r2, [r5, #0]
 80031e0:	e7ee      	b.n	80031c0 <__swhatbuf_r+0x1c>
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	2000      	movs	r0, #0
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	b016      	add	sp, #88	; 0x58
 80031ea:	bd70      	pop	{r4, r5, r6, pc}

080031ec <__smakebuf_r>:
 80031ec:	898b      	ldrh	r3, [r1, #12]
 80031ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031f0:	079d      	lsls	r5, r3, #30
 80031f2:	4606      	mov	r6, r0
 80031f4:	460c      	mov	r4, r1
 80031f6:	d507      	bpl.n	8003208 <__smakebuf_r+0x1c>
 80031f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	6123      	str	r3, [r4, #16]
 8003200:	2301      	movs	r3, #1
 8003202:	6163      	str	r3, [r4, #20]
 8003204:	b002      	add	sp, #8
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	466a      	mov	r2, sp
 800320a:	ab01      	add	r3, sp, #4
 800320c:	f7ff ffca 	bl	80031a4 <__swhatbuf_r>
 8003210:	9900      	ldr	r1, [sp, #0]
 8003212:	4605      	mov	r5, r0
 8003214:	4630      	mov	r0, r6
 8003216:	f7ff fa73 	bl	8002700 <_malloc_r>
 800321a:	b948      	cbnz	r0, 8003230 <__smakebuf_r+0x44>
 800321c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003220:	059a      	lsls	r2, r3, #22
 8003222:	d4ef      	bmi.n	8003204 <__smakebuf_r+0x18>
 8003224:	f023 0303 	bic.w	r3, r3, #3
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	e7e3      	b.n	80031f8 <__smakebuf_r+0xc>
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <__smakebuf_r+0x7c>)
 8003232:	62b3      	str	r3, [r6, #40]	; 0x28
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	6020      	str	r0, [r4, #0]
 8003238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	9b00      	ldr	r3, [sp, #0]
 8003240:	6120      	str	r0, [r4, #16]
 8003242:	6163      	str	r3, [r4, #20]
 8003244:	9b01      	ldr	r3, [sp, #4]
 8003246:	b15b      	cbz	r3, 8003260 <__smakebuf_r+0x74>
 8003248:	4630      	mov	r0, r6
 800324a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800324e:	f000 f897 	bl	8003380 <_isatty_r>
 8003252:	b128      	cbz	r0, 8003260 <__smakebuf_r+0x74>
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	81a3      	strh	r3, [r4, #12]
 8003260:	89a0      	ldrh	r0, [r4, #12]
 8003262:	4305      	orrs	r5, r0
 8003264:	81a5      	strh	r5, [r4, #12]
 8003266:	e7cd      	b.n	8003204 <__smakebuf_r+0x18>
 8003268:	08002559 	.word	0x08002559

0800326c <memchr>:
 800326c:	4603      	mov	r3, r0
 800326e:	b510      	push	{r4, lr}
 8003270:	b2c9      	uxtb	r1, r1
 8003272:	4402      	add	r2, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	4618      	mov	r0, r3
 8003278:	d101      	bne.n	800327e <memchr+0x12>
 800327a:	2000      	movs	r0, #0
 800327c:	e003      	b.n	8003286 <memchr+0x1a>
 800327e:	7804      	ldrb	r4, [r0, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	428c      	cmp	r4, r1
 8003284:	d1f6      	bne.n	8003274 <memchr+0x8>
 8003286:	bd10      	pop	{r4, pc}

08003288 <__malloc_lock>:
 8003288:	4801      	ldr	r0, [pc, #4]	; (8003290 <__malloc_lock+0x8>)
 800328a:	f7ff ba37 	b.w	80026fc <__retarget_lock_acquire_recursive>
 800328e:	bf00      	nop
 8003290:	20000344 	.word	0x20000344

08003294 <__malloc_unlock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_unlock+0x8>)
 8003296:	f7ff ba32 	b.w	80026fe <__retarget_lock_release_recursive>
 800329a:	bf00      	nop
 800329c:	20000344 	.word	0x20000344

080032a0 <_free_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4605      	mov	r5, r0
 80032a4:	2900      	cmp	r1, #0
 80032a6:	d043      	beq.n	8003330 <_free_r+0x90>
 80032a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032ac:	1f0c      	subs	r4, r1, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bfb8      	it	lt
 80032b2:	18e4      	addlt	r4, r4, r3
 80032b4:	f7ff ffe8 	bl	8003288 <__malloc_lock>
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <_free_r+0x94>)
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	4610      	mov	r0, r2
 80032be:	b933      	cbnz	r3, 80032ce <_free_r+0x2e>
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	6014      	str	r4, [r2, #0]
 80032c4:	4628      	mov	r0, r5
 80032c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ca:	f7ff bfe3 	b.w	8003294 <__malloc_unlock>
 80032ce:	42a3      	cmp	r3, r4
 80032d0:	d90a      	bls.n	80032e8 <_free_r+0x48>
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	1862      	adds	r2, r4, r1
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bf01      	itttt	eq
 80032da:	681a      	ldreq	r2, [r3, #0]
 80032dc:	685b      	ldreq	r3, [r3, #4]
 80032de:	1852      	addeq	r2, r2, r1
 80032e0:	6022      	streq	r2, [r4, #0]
 80032e2:	6063      	str	r3, [r4, #4]
 80032e4:	6004      	str	r4, [r0, #0]
 80032e6:	e7ed      	b.n	80032c4 <_free_r+0x24>
 80032e8:	461a      	mov	r2, r3
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	b10b      	cbz	r3, 80032f2 <_free_r+0x52>
 80032ee:	42a3      	cmp	r3, r4
 80032f0:	d9fa      	bls.n	80032e8 <_free_r+0x48>
 80032f2:	6811      	ldr	r1, [r2, #0]
 80032f4:	1850      	adds	r0, r2, r1
 80032f6:	42a0      	cmp	r0, r4
 80032f8:	d10b      	bne.n	8003312 <_free_r+0x72>
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	4401      	add	r1, r0
 80032fe:	1850      	adds	r0, r2, r1
 8003300:	4283      	cmp	r3, r0
 8003302:	6011      	str	r1, [r2, #0]
 8003304:	d1de      	bne.n	80032c4 <_free_r+0x24>
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4401      	add	r1, r0
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	6053      	str	r3, [r2, #4]
 8003310:	e7d8      	b.n	80032c4 <_free_r+0x24>
 8003312:	d902      	bls.n	800331a <_free_r+0x7a>
 8003314:	230c      	movs	r3, #12
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	e7d4      	b.n	80032c4 <_free_r+0x24>
 800331a:	6820      	ldr	r0, [r4, #0]
 800331c:	1821      	adds	r1, r4, r0
 800331e:	428b      	cmp	r3, r1
 8003320:	bf01      	itttt	eq
 8003322:	6819      	ldreq	r1, [r3, #0]
 8003324:	685b      	ldreq	r3, [r3, #4]
 8003326:	1809      	addeq	r1, r1, r0
 8003328:	6021      	streq	r1, [r4, #0]
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	6054      	str	r4, [r2, #4]
 800332e:	e7c9      	b.n	80032c4 <_free_r+0x24>
 8003330:	bd38      	pop	{r3, r4, r5, pc}
 8003332:	bf00      	nop
 8003334:	200000a8 	.word	0x200000a8

08003338 <_read_r>:
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	2200      	movs	r2, #0
 8003342:	4d05      	ldr	r5, [pc, #20]	; (8003358 <_read_r+0x20>)
 8003344:	602a      	str	r2, [r5, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	f7fd f9a0 	bl	800068c <_read>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_read_r+0x1e>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_read_r+0x1e>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	2000034c 	.word	0x2000034c

0800335c <_fstat_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	2300      	movs	r3, #0
 8003360:	4d06      	ldr	r5, [pc, #24]	; (800337c <_fstat_r+0x20>)
 8003362:	4604      	mov	r4, r0
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	f7fd f9b7 	bl	80006dc <_fstat>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	d102      	bne.n	8003378 <_fstat_r+0x1c>
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	b103      	cbz	r3, 8003378 <_fstat_r+0x1c>
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	2000034c 	.word	0x2000034c

08003380 <_isatty_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	; (800339c <_isatty_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd f9b5 	bl	80006fa <_isatty>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_isatty_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_isatty_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	2000034c 	.word	0x2000034c

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
